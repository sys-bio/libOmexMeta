# This setup.py uses cmake to pass some variables like version
# to the python setup script. Before use, cmake must configure this
# file.
# you may run python setup.py from the binary tree after you have ran cmake
from setuptools import setup
import os

# get source directory
PYOMEXMETA_DIR = "@PYOMEXMETA_DIR@"


# See https://github.com/google/or-tools/issues/616
from setuptools.command.install import install
class InstallPlatlib(install):
    def finalize_options(self):
        install.finalize_options(self)
        if self.distribution.has_ext_modules():
            self.install_lib = self.install_platlib


CLASSIFIERS = """\
Development Status :: 3 - Alpha
Intended Audience :: Science/Research
Intended Audience :: Developers
License :: OSI Approved :: Apache Software License
Programming Language :: C
Programming Language :: C++
Programming Language :: Python
Programming Language :: Python :: 3.7
Programming Language :: Python :: 3.8
Programming Language :: Python :: 3.9
Programming Language :: Python :: 3 :: Only
Programming Language :: Python :: Implementation :: CPython
Topic :: Software Development
Topic :: Scientific/Engineering
Operating System :: Microsoft :: Windows
Operating System :: MacOS
Operating System :: POSIX
Operating System :: Unix
"""


# Todo this is dead now - libraries are statically linked so we don't need to deal with all this.
binaries = [
    os.path.join(PYOMEXMETA_DIR, "concrt140.dll"),
    os.path.join(PYOMEXMETA_DIR, "api-ms-win-core-wow64-l1-1-0.dll"),
    os.path.join(PYOMEXMETA_DIR, "libcrypto-1_1-x64.dll"),
    os.path.join(PYOMEXMETA_DIR, "libcurl.dll"),
    # os.path.join(PYOMEXMETA_DIR, "libdb48.dll"),
    # os.path.join(PYOMEXMETA_DIR, "libdb-5.3.so"),
    os.path.join(PYOMEXMETA_DIR, "libiconv.dll"),
    os.path.join(PYOMEXMETA_DIR, "libcharset.dll"),
    # os.path.join(PYOMEXMETA_DIR, "libpq.dll"),
    os.path.join(PYOMEXMETA_DIR, "libssl-1_1-x64.dll"),
    os.path.join(PYOMEXMETA_DIR, "libxml2.dll"),
    os.path.join(PYOMEXMETA_DIR, "libxslt.dll"),
    os.path.join(PYOMEXMETA_DIR, "lzma.dll"),
    os.path.join(PYOMEXMETA_DIR, "msvcp140.dll"),
    os.path.join(PYOMEXMETA_DIR, "msvcp140_1.dll"),
    os.path.join(PYOMEXMETA_DIR, "msvcp140_2.dll"),
    os.path.join(PYOMEXMETA_DIR, "msvcp140_codecvt_ids.dll"),
    os.path.join(PYOMEXMETA_DIR, "OmexMeta.dll"),
    os.path.join(PYOMEXMETA_DIR, "OmexMetaCAPI.dll"),
    os.path.join(PYOMEXMETA_DIR, "pcre.dll"),
    os.path.join(PYOMEXMETA_DIR, "redland-combined.dll"),
    os.path.join(PYOMEXMETA_DIR, "sqlite3.dll"),
    os.path.join(PYOMEXMETA_DIR, "vcruntime140.dll"),
    os.path.join(PYOMEXMETA_DIR, "yajl.dll"),
    os.path.join(PYOMEXMETA_DIR, "zlib1.dll"),
    os.path.join(PYOMEXMETA_DIR, "vcruntime140.dll"),
    os.path.join(PYOMEXMETA_DIR, "vcruntime140_1.dll"),
    # linux dependencies
    os.path.join(PYOMEXMETA_DIR, "libOmexMeta.so.@LIBOMEXMETA_VERSION@"),
    os.path.join(PYOMEXMETA_DIR, "libOmexMetaCAPI.so.@LIBOMEXMETA_VERSION@"),
    # os.path.join(PYOMEXMETA_DIR, "libsqlite3.so"),
    # os.path.join(PYOMEXMETA_DIR, "libxml2.so"),
    # Problem with distributing linux dependencies:
    #   The .so files are actually symlinks. They have a size of 0 and do not
    #   get packaged into a pip wheel. On linux, its therefore easier to
    #   get users to install dependencies manually.  One solution is
    #   to copy over the actual so files (i.e. with version number) in cmake
    #   instead of the symlink.
]


#for i in binaries:
#    print(f"Looking for binary \"{i}\"")
    # if not os.path.isfile(i):
    #     raise FileNotFoundError(f"Dependency \"{i}\" not found.")

def find_libomexmeta():
    paths = []
    libomexmeta = os.path.join(
        os.path.abspath(os.path.dirname(__file__)),
        'site-packages/pyomexmeta/@CMAKE_SHARED_LIBRARY_PREFIX@OmexMetaCAPI-@LIBOMEXMETA_VERSION@@CMAKE_SHARED_LIBRARY_SUFFIX@'
    )
    if os.path.isfile(libomexmeta):
        return libomexmeta
    paths.append(libomexmeta)
    print("Searched", libomexmeta, "for libomexmeta: exists = ", os.path.isfile(libomexmeta))
    libomexmeta = os.path.join(
        os.path.abspath(os.path.dirname(__file__)),
        'site-packages/pyomexmeta/@CMAKE_SHARED_LIBRARY_PREFIX@OmexMetaCAPI.@LIBOMEXMETA_VERSION@@CMAKE_SHARED_LIBRARY_SUFFIX@'
    )
    if os.path.isfile(libomexmeta):
        return libomexmeta
    paths.append(libomexmeta)
    print("Searched", libomexmeta, "for libomexmeta: exists = ", os.path.isfile(libomexmeta))
    libomexmeta = os.path.join(
                os.path.abspath(os.path.dirname(__file__)),
                'site-packages/pyomexmeta/@CMAKE_SHARED_LIBRARY_PREFIX@OmexMetaCAPI@CMAKE_SHARED_LIBRARY_SUFFIX@.@LIBOMEXMETA_VERSION@'
            )
    if not(os.path.isfile(libomexmeta)):
        raise FileNotFoundError(libomexmeta)
    return libomexmeta

setup(
    name='pyomexmeta',
    version='@LIBOMEXMETA_VERSION@',
    license='MIT',
    long_description=open('@README_FILE@').read(),
    long_description_content_type="text/markdown",
    author='Ciaran Welsh',
    author_email='cw00137@gmail.com',
    url='https://github.com/sys-bio/libomexmeta',
    keywords=['annotation', 'rdf'],
    install_requires=open("requirements.txt").read().split("\n"),
    tests_require=open("test-requirements.txt").read().split("\n"),
    packages=['pyomexmeta'],
    package_dir={'pyomexmeta': 'site-packages/pyomexmeta'},
    package_data={'pyomexmeta': [
        'LICENCE.txt', find_libomexmeta(),
    ]}, # + binaries},
    include_package_data=True,
    classifiers=[_f for _f in CLASSIFIERS.split('\n') if _f],
    platforms=["Windows", "Linux", "Unix", "Mac OS-X"],
    has_ext_modules=lambda: True,

)
