
trigger:
- master
- develop

pr:
- master
- develop

stages:
      # ubuntu
  - stage: BuildUbuntu
    dependsOn: []
    displayName: Build Ubuntu
    jobs:
      - job: BuildUbuntu
        timeoutInMinutes: "0"
        strategy:
          matrix:
            py37:
              PythonVersion: 3.7
              PythonName: py37
            py38:
              PythonVersion: 3.8
              PythonName: py38
            py39:
              PythonVersion: 3.9
              PythonName: py39
        pool:
          vmImage: 'ubuntu-18.04'
        variables:
          MinicondaRoot: '/usr/share/miniconda'
          CondaExecutable: '$(MinicondaRoot)/bin/conda'
          PythonRoot: '$(MinicondaRoot)/envs/$(PythonName)'
          PythonLibDir: '$(PythonRoot)/lib'
          PythonExecutable: '$(PythonRoot)/bin/python'
          PipExecutable: '$(PythonRoot)/bin/pip'
          VCPKG_INSTALL_PREFIX: '$(Pipeline.Workspace)/vcpkg'
          CCACHE_DIR: '$(Pipeline.Workspace)/ccache'
          BUILD_DIRECTORY: '$(System.DefaultWorkingDirectory)/build'
          SOURCE_DIRECTORY: '$(System.DefaultWorkingDirectory)'
          DOXYGEN_DIRECTORY: '$(System.DefaultWorkingDirectory)/doxygen'
          INSTALL_DIRECTORY: '$(System.DefaultWorkingDirectory)/install-azure'
          LINUX_WHEEL: '$(INSTALL_DIRECTORY)/libOmexMeta-x64Ubuntu/dist'
          PIP_WHEELS: '$(Build.ArtifactStagingDirectory)/PipWheels'
        steps:
          - checkout: self
            submodules: recursive

          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: Add conda to PATH

          - script: |
              echo "Default directory: $(pwd)"
              echo "Agent.BuildDirectory $(Agent.BuildDirectory)"
              echo "Pipeline.Workspace $(Pipeline.Workspace)"
              echo "System.DefaultWorkingDirectory $(System.DefaultWorkingDirectory)"
              echo "VCPKG_INSTALL_PREFIX $(VCPKG_INSTALL_PREFIX)"
              echo "SOURCE_DIRECORY $(SOURCE_DIRECORY)"
              echo "BUILD_DIRECTORY $(BUILD_DIRECTORY)"
              echo "Agent.OS $(Agent.OS)"
              echo "gcc $(gcc --version)"
              echo "g++ $(g++ --version)"

            displayName: PrintAzureVariables
          - task: Cache@2
            inputs:
              key: 'vcpkg_cache | "$(Agent.Os)"'
              path: '$(VCPKG_INSTALL_PREFIX)'
          - script: |
              git clone https://github.com/microsoft/vcpkg.git $(VCPKG_INSTALL_PREFIX)
              cd $(VCPKG_INSTALL_PREFIX)
              ./bootstrap-vcpkg.sh
              vcpkg integrate install
              vcpkg install curl pcre openssl yajl sqlite3 liblzma
            displayName: Install vcpkg dependencies

          - script: |
              echo "gcc $(gcc --version)"
              echo "g++ $(g++ --version)"
              sudo add-apt-repository ppa:ubuntu-toolchain-r/test
              sudo apt-get update
              sudo apt-get install -y gcc-10 g++-10 graphviz
              sudo apt install doxygen
              doxygen --help
            displayName: Install Other Dependencies

          - script: |
              # activate gcc-10 in current shell
              update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 100
              export CC=/usr/bin/gcc-10
              export CXX=/usr/bin/g++-10
              export C=/usr/bin/gcc-10

              eval "$(conda shell.bash hook)"
              echo "[running] $(CondaExecutable) create -y --name $(PythonName) python=$(PythonVersion)"
              $(CondaExecutable) create -y --name $(PythonName) python=$(PythonVersion)

              echo "[running] $(CondaExecutable) activate $(PythonName)"
              $(CondaExecutable) activate $(PythonName)

              echo "[running] cd $(SOURCE_DIRECTORY)"
              cd $(SOURCE_DIRECTORY)

              echo "[running] $(PipExecutable) install -r requirements.txt"
              $(PipExecutable) install -r requirements.txt

              echo "[running] $(PipExecutable) install -r test-requirements.txt"
              $(PipExecutable) install -r test-requirements.txt

              echo "[running] mkdir -p $(BUILD_DIRECTORY)"
              mkdir -p $(BUILD_DIRECTORY)

              echo "[running] cd $(BUILD_DIRECTORY)"
              cd $(BUILD_DIRECTORY)

              echo "[running] cmake -DVCPKG_ROOT=$(VCPKG_INSTALL_PREFIX) -DCMAKE_INSTALL_PREFIX=\"$(INSTALL_DIRECTORY)\" -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_PYTHON=ON -DPython_ROOT_DIR=$(PythonRoot) -DBUILD_DOCS=ON -DBUILD_DOCS_EXECUTABLE=ON .."
              cmake -DVCPKG_ROOT=$(VCPKG_INSTALL_PREFIX) -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIRECTORY) -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_PYTHON=ON -DPython_ROOT_DIR=$(PythonRoot) -DBUILD_DOCS=ON -DBUILD_DOCS_EXECUTABLE=ON -DSPHINX_EXECUTABLE=$(which sphinx-build) ..
              cmake --build . --target install --config Release -j 12
            displayName: Build libOmexMeta

          - script: |
              echo "[running] cmake --build $(BUILD_DIRECTORY) --target run-ctest --config Release"
              echo "[running] cd $(BUILD_DIRECTORY)"
              cd $(BUILD_DIRECTORY)

              echo "[running] cmake --build . --target run-ctest --config Release"
              cmake --build . --target run-ctest --config Release
            displayName: Run Tests With Python

          - script: |
              eval "$(conda shell.bash hook)"
              $(CondaExecutable) activate $(PythonName)
              cd $(INSTALL_DIRECTORY)
              $(PythonExecutable) setup.py bdist_wheel
              cd dist
              wheel=$(realpath $(ls))
              echo "wheel is: $wheel"
              $(PipExecutable) install $wheel
              $(PythonExecutable) -c "import pyomexmeta;pyomexmeta.run_tests()"

            displayName: Build and install pip wheel then run tests from within Python

          - powershell: gci env:* | sort-object name | Format-Table -AutoSize | Out-File $env:BUILD_ARTIFACTSTAGINGDIRECTORY/environment-variables.txt

          - task: CopyFiles@2
            inputs:
              sourceFolder: '$(INSTALL_DIRECTORY)'
              contents: '**'
              targetFolder: '$(Build.ArtifactStagingDirectory)/libomexmeta-$(PythonName)'
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)/libomexmeta-$(PythonName)'
              artifactName: libOmexMeta-x64Linux-$(PythonName)
              Parallel: true
              ParallelCount: 8

  # macos
  - stage: MacOS
    dependsOn: []
    displayName: MacOs
    jobs:
      - job: BuildMacOs
        timeoutInMinutes: "0"
        strategy:
          matrix:
            py37:
              PythonVersion: 3.7
              PythonName: py37
            py38:
              PythonVersion: 3.8
              PythonName: py38
            py39:
              PythonVersion: 3.9
              PythonName: py39
        pool:
          vmImage: 'macos-10.15'
        variables:
          VCPKG_INSTALL_PREFIX: '$(Pipeline.Workspace)/vcpkg'
          CCACHE_DIR: '$(Pipeline.Workspace)/ccache'
          BUILD_DIRECTORY: '$(System.DefaultWorkingDirectory)/build'
          SOURCE_DIRECTORY: '$(System.DefaultWorkingDirectory)'
          DOXYGEN_DIRECTORY: '$(System.DefaultWorkingDirectory)/doxygen'
          INSTALL_DIRECTORY: '$(System.DefaultWorkingDirectory)/install-azure'
          MAC_WHEEL: '$(INSTALL_DIRECTORY)/libOmexMeta-x64Mac/dist'
          PIP_WHEELS: '$(Build.ArtifactStagingDirectory)/PipWheels'
          MinicondaRoot: '/usr/local/miniconda'
          PythonRoot: '$(MinicondaRoot)/envs/$(PythonName)'
          PythonLibDir: '$(PythonRoot)/lib'
          PythonExecutable: '$(PythonRoot)/bin/python'
          CondaExecutable: '$(MinicondaRoot)/condabin/conda'
          PipExecutable: '$(PythonRoot)/bin/pip'
        steps:

          - checkout: self
            submodules: recursive

          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: Add conda to PATH

          # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
          # We need to take ownership if we want to update conda or install packages globally
          - bash: sudo chown -R $USER $CONDA
            displayName: Take ownership of conda installation

          - script: |
              brew install doxygen
              doxygen --help
            displayName: InstallDoxygen

          - script: |
              echo "Default directory: $(pwd)"
              echo "Agent.BuildDirectory $(Agent.BuildDirectory)"
              echo "Pipeline.Workspace $(Pipeline.Workspace)"
              echo "System.DefaultWorkingDirectory $(System.DefaultWorkingDirectory)"
              echo "VCPKG_INSTALL_PREFIX $(VCPKG_INSTALL_PREFIX)"
              echo "Agent.OS $(Agent.OS)"
              echo "gcc $(gcc --version)"
              echo "g++ $(g++ --version)"

            displayName: PrintAzureVariables
          - task: Cache@2
            inputs:
              key: 'vcpkg_cache | "$(Agent.Os)"'
              path: '$(VCPKG_INSTALL_PREFIX)'
          - script: |
              brew install graphviz coreutils
              git clone https://github.com/microsoft/vcpkg.git $(VCPKG_INSTALL_PREFIX)
              cd $(VCPKG_INSTALL_PREFIX)
              ./bootstrap-vcpkg.sh
              vcpkg integrate install
              vcpkg install curl pcre openssl yajl sqlite3 liblzma
              echo "gcc $(gcc --version)"
              echo "g++ $(g++ --version)"
            displayName: InstallDependencies

          - script: |
              eval "$(conda shell.bash hook)"
              $(CondaExecutable) create -y --name $(PythonName) python=$(PythonVersion)
              $(CondaExecutable) activate $(PythonName)
              $(PipExecutable) install -r requirements.txt
              $(PipExecutable) install -r test-requirements.txt
              # $(PipExecutable) install ipython
              # $(PipExecutable) install breathe sphinx-tabs recommonmark beautifulsoup4 requests sphinxcontrib-programoutput tellurium python-libcombine pytest graphviz
              echo "[running] mkdir -p $(BUILD_DIRECTORY)"
              mkdir -p $(BUILD_DIRECTORY)
              echo "[running] cd $(BUILD_DIRECTORY)"
              cd $(BUILD_DIRECTORY)
              cmake -DVCPKG_ROOT=$(VCPKG_INSTALL_PREFIX) -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIRECTORY) -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_PYTHON=ON -DPython_ROOT_DIR=$(PythonRoot) -DBUILD_DOCS=ON -DBUILD_DOCS_EXAMPLES=ON  -DSPHINX_EXECUTABLE=$(which sphinx-build) ..
              cmake --build . --target install --config Release -j 12

            displayName: Build libOmexMeta 
          - script: |
              cd $(BUILD_DIRECTORY)
              cmake --build . --target run-ctest --config Release
            displayName: Run libOmexMeta Tests

          - script: |
              eval "$(conda shell.bash hook)"
              conda activate $(PythonName)
              $(PipExecutable) install ipython
              cd $(INSTALL_DIRECTORY)
              $(PythonExecutable) setup.py bdist_wheel
              cd dist
              wheel=$(realpath $(ls))
              $(PipExecutable) install $wheel
              $(PythonExecutable) -c "import pyomexmeta;pyomexmeta.run_tests()"
            displayName: Build and install pip wheel then run tests from within Python
          - task: CopyFiles@2
            inputs:
              sourceFolder: '$(INSTALL_DIRECTORY)'
              contents: '**'
              targetFolder: '$(Build.ArtifactStagingDirectory)/libomexmeta-$(PythonName)'
            displayName: Copy install to artifact staging area
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)/libomexmeta-$(PythonName)'
              artifactName: libOmexMeta-x64Mac-$(PythonName)
              Parallel: true
              ParallelCount: 8

  # windows
  - stage: Windows
    dependsOn: []
    displayName: Windows
    jobs:
      - job: BuildWindows
        timeoutInMinutes: "0"
        strategy:
          matrix:
            py37:
              PythonVersion: 3.7
              PythonName: py37
            py38:
              PythonVersion: 3.8
              PythonName: py38
            py39:
              PythonVersion: 3.9
              PythonName: py39
        pool:
          vmImage: 'windows-2019'
        variables:
          VCPKG_INSTALL_PREFIX: '$(Pipeline.Workspace)/vcpkg'
          CCACHE_DIR: '$(Pipeline.Workspace)/ccache'
          BUILD_DIRECTORY: '$(System.DefaultWorkingDirectory)/build'
          SOURCE_DIRECTORY: '$(System.DefaultWorkingDirectory)'
          DOXYGEN_DIRECTORY: '$(System.DefaultWorkingDirectory)/doxygen'
          INSTALL_DIRECTORY: '$(System.DefaultWorkingDirectory)/install-azure'
          CONDA_ACTIVATE: 'C:\Miniconda\bin\activate.exe'
          PIP: 'C:\Miniconda\Scripts\pip.exe'
          PIP_WHEELS: '$(Build.ArtifactStagingDirectory)/PipWheels'
          WINDOWS_WHEEL: '$(INSTALL_DIRECTORY)/libOmexMeta-x64Windows/dist'

          MinicondaRoot: 'C:\Miniconda'
          PythonRoot: '$(MinicondaRoot)\envs\$(PythonName)'
          PythonScriptsDir: '$(PythonRoot)\Scripts'
          CondaExecutable: '$(MinicondaRoot)\Scripts\conda.exe'
          PythonExecutable: '$(PythonRoot)\python.exe'
          IPythonExecutable: '$(PythonRoot)\Scripts\ipython.exe'
          PythonLibDir: '$(PythonRoot)\Lib'
          PythonIncludeDir: '$(PythonRoot)\include'
          PipExecutable: '$(PythonScriptsDir)\pip.exe'
          PyWin32Path: '$(PythonLibDir)\site-packages\pywin32_system32' # needs to be added to path for win32api
          DoxygenDownloadUrl: 'https://doxygen.nl/files/doxygen-1.9.1.windows.x64.bin.zip'
          DoxygenDirectory: '$(System.DefaultWorkingDirectory)\Doxygen'
          DoxygenExecutable: '$(DoxygenDirectory)\doxygen.exe'

        steps:
          - checkout: self
            submodules: recursive

          - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
            displayName: Add conda to PATH
          - script: |
              echo "Default directory: $(pwd)"
              echo "Agent.BuildDirectory $(Agent.BuildDirectory)"
              echo "Pipeline.Workspace $(Pipeline.Workspace)"
              echo "System.DefaultWorkingDirectory $(System.DefaultWorkingDirectory)"
              echo "VCPKG_INSTALL_PREFIX $(VCPKG_INSTALL_PREFIX)"
              echo "Agent.OS $(Agent.OS)"
              echo "gcc $(gcc --version)"
              echo "g++ $(g++ --version)"
              echo "MinicondaRoot            $(MinicondaRoot)"
              echo "PythonRoot               $(PythonRoot)"
              echo "PythonScriptsDir         $(PythonScriptsDir)"
              echo "CondaExecutable          $(CondaExecutable)"
              echo "PythonExecutable         $(PythonExecutable)"
              echo "IPythonExecutable        $(IPythonExecutable)"
              echo "PythonLibDir             $(PythonLibDir)"
              echo "PipExecutable            $(PipExecutable)"
            displayName: PrintAzureVariables

          - task: Cache@2
            inputs:
              key: 'vcpkg_cache |"$(Agent.Os)"'
              path: '"$(VCPKG_INSTALL_PREFIX)"'
          - powershell: |
              git clone https://github.com/microsoft/vcpkg.git "$(VCPKG_INSTALL_PREFIX)"
              cd "$(VCPKG_INSTALL_PREFIX)"
              ./bootstrap-vcpkg.sh
              vcpkg integrate install
              vcpkg install curl:x64-windows-static pcre:x64-windows-static openssl:x64-windows-static yajl:x64-windows-static sqlite3:x64-windows-static liblzma:x64-windows-static
            displayName: InstallDependencies

          - task: Cache@2
            inputs:
              key: 'doxygen_cache |"$(Agent.Os)"'
              path: '"$(DoxygenDirectory)"'
          - powershell: |
              # create place for Doxygen, if not exists already
              echo "creating a new directory for doxygen, if not already exists. Doxygen directory is $(DoxygenDirectory)"
              If (!(test-path $(DoxygenDirectory)))
              {
                New-Item -ItemType Directory -Force -Path $(DoxygenDirectory)
              }
              echo "Cding to DoxygenDirectory $(DoxygenDirectory)"
              cd $(DoxygenDirectory)
              # download doxygen
              Invoke-WebRequest "$(DoxygenDownloadUrl)" -OutFile 'doxygen.zip'
              # unzip doxygen
              unzip -o doxygen.zip

              # Ensure doxygen exists
              $ErrorActionPreference = 'Stop'
              # check for file explicitly (in case a directory with that name exists)
              if(![System.IO.File]::Exists("$(DoxygenExecutable)")) {
                  # throwing an exception will abort the job
                  throw (New-Object System.IO.FileNotFoundException("File not found: $(DoxygenExecutable)", "$(DoxygenExecutable)"))
              }
            displayName: Install Doxygen

          - script: |

              echo "cd to $(DoxygenDirectory) and ls"
              cd $(DoxygenDirectory)
              ls
              echo "$env:Path += ;$(DoxygenDirectory)"
              $env:Path += ';$(DoxygenDirectory)'

              echo "[running] doxygen --help"
              doxygen --help

            displayName: Check Doxygen

          - powershell: |
              If (!(test-path $(BUILD_DIRECTORY)))
              {
                New-Item -ItemType Directory -Force -Path $(BUILD_DIRECTORY)
              }
              echo "$(CondaExecutable) shell.powershell hook"
              $(CondaExecutable) shell.powershell hook

              echo "installing pywin32 on base python"
              $(MinicondaRoot)/Scripts/pip.exe install pywin32

              $ENV:PATH="$ENV:PATH;$(PyWin32Path)"

              echo "$(CondaExecutable) create -y --name $(PythonName) python=$(PythonVersion)"
              $(CondaExecutable) create -y --name $(PythonName) python=$(PythonVersion)

              echo "$(CondaExecutable) activate $(PythonName)"
              $(CondaExecutable) activate $(PythonName)

              echo "$Env:LD_LIBRARY_PATH = $(PythonLibDir)"
              $Env:LD_LIBRARY_PATH = "$(PythonLibDir)"

              echo "cding to source directory:"
              cd $(SOURCE_DIRECTORY)
              $(PipExecutable) install -r requirements.txt
              $(PipExecutable) install -r test-requirements.txt
              $(PipExecutable) install pywin32

              cd $(BUILD_DIRECTORY)
              cmake  -DVCPKG_ROOT=$(VCPKG_INSTALL_PREFIX) -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIRECTORY) -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_PYTHON=ON -DPython_ROOT_DIR=$(PythonRoot)  -DBUILD_DOCS=ON -DBUILD_DOCS_EXAMPLES=ON -DDOXYGEN_EXECUTABLE=$(DoxygenExecutable) ..
              cmake --build . --target install --config Release

            displayName: Build With Python

          - powershell: |
              cd $(BUILD_DIRECTORY)
              # https://stackoverflow.com/a/63102942/3059024
              $ENV:PATH="$ENV:PATH;$(PyWin32Path)"
              ctest -C Release --verbose --extra-verbose --output-on-failure
            displayName: Run libOmexMeta Tests

            # publish python packages in azure:
            #   https://docs.microsoft.com/en-us/azure/devops/pipelines/artifacts/pypi?view=azure-devops&tabs=yaml

          - powershell: |
              $ENV:PATH="$ENV:PATH;$(PythonScriptsDir)"
              $Env:LD_LIBRARY_PATH = "$(PythonLibDir)"
              $ENV:PATH="$ENV:PATH;$(PyWin32Path)"
              echo "Where.exe conda: "
              where.exe conda
              echo "Where.exe pip: "
              where.exe pip
              echo "Cding to install directory $INSTALL_DIRECTORY"
              cd $(INSTALL_DIRECTORY)
              echo "ls ing"
              ls
              echo "where.exe"
              where.exe python
              echo "running setup.py bdist_wheel"
              $(PythonExecutable) setup.py bdist_wheel
              $wheel = Get-ChildItem -LiteralPath dist -Recurse -File |% FullName
              echo "Wheel is: $wheel"
              echo "[running] $(PipExecutable) install $wheel"
              $(PipExecutable) install $wheel
              echo "Running $(PythonExecutable) -c import pyomexmeta;pyomexmeta.run_tests()"
              $(PythonExecutable) -c "import pyomexmeta;pyomexmeta.run_tests()"
            displayName: Build and install pip wheel then run tests from within Python
          - task: CopyFiles@2
            inputs:
              sourceFolder: '$(INSTALL_DIRECTORY)'
              contents: '**'
              targetFolder: '$(Build.ArtifactStagingDirectory)/libomexmeta-$(PythonName)'
            displayName: Copy install to artifact staging area
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)/libomexmeta-$(PythonName)'
              artifactName: libOmexMeta-x64Windows-$(PythonName)
              Parallel: true
              ParallelCount: 8

  # manylinux
  - stage: Manylinux2014
    displayName: libomexmeta-manylinux2014-base
    dependsOn: []
    jobs:
      - job:
        strategy:
          matrix:
            py37:
              PythonVersion: 3.7
              PythonName: py37
            py38:
              PythonVersion: 3.8
              PythonName: py38
            py39:
              PythonVersion: 3.9
              PythonName: py39
        pool:
          vmImage: 'ubuntu-18.04'
        container: ciaranwelsh/libomexmeta-manylinux2014-base:latest
        variables:
          VCPKG_INSTALL_PREFIX: '/vcpkg'
          CCACHE_DIR: '$(Pipeline.Workspace)/ccache'
          BUILD_DIRECTORY: '$(System.DefaultWorkingDirectory)/build'
          SOURCE_DIRECTORY: '$(System.DefaultWorkingDirectory)'
          DOXYGEN_DIRECTORY: '$(System.DefaultWorkingDirectory)/doxygen'
          INSTALL_DIRECTORY: '$(System.DefaultWorkingDirectory)/install-azure'

          MinicondaRoot: '/Miniconda3'
          PythonRoot: '$(MinicondaRoot)/envs/$(PythonName)'
          CondaExecutable: '$(MinicondaRoot)/bin/conda'
          PythonExecutable: '$(PythonRoot)/bin/python'
          IPythonExecutable: '$(PythonRoot)/bin/ipython'
          PythonLibDir: '$(PythonRoot)/Lib'
          PythonIncludeDir: '$(PythonRoot)/include'
          PipExecutable: '$(PythonRoot)/bin/pip'

        steps:
          - checkout: self
            submodules: recursive

          - script: |
              eval "$(conda shell.bash hook)"
              $(CondaExecutable) activate $(PythonName)

              echo "cd $(SOURCE_DIRECTORY)"
              cd $(SOURCE_DIRECTORY)

              echo "$(PipExecutable) install -r requirements.txt"
              $(PipExecutable) install -r requirements.txt
              echo "$(PipExecutable) install -r test-requirements.txt"
              $(PipExecutable) install -r test-requirements.txt

              echo "doxygen --help"
              doxygen --help

              echo "mkdir $(BUILD_DIRECTORY)"
              mkdir $(BUILD_DIRECTORY)

              echo "cd $(BUILD_DIRECTORY)"
              cd $(BUILD_DIRECTORY)

              #$(PipExecutable) install python-libcombine pytest wheel ipython breathe sphinx-tabs requests tellurium python-libcombine graphviz

              cmake -DVCPKG_ROOT=$(VCPKG_INSTALL_PREFIX) -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIRECTORY) -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_PYTHON=ON -DPython_ROOT_DIR=$(PythonRoot) -DBUILD_DOCS=ON -DBUILD_DOCS_EXAMPLES=ON -DSPHINX_EXECUTABLE=$(which sphinx-build) ..
              cmake --build . --target install --config Release -j 12

            displayName: Build With Python

          - script: |
              cd $(BUILD_DIRECTORY)
              ctest --verbose --extra-verbose --output-on-failure
            displayName: Run tests

          - script: |
              eval "$(conda shell.bash hook)"
              $(CondaExecutable) activate $(PythonName)
              cd $(INSTALL_DIRECTORY)
              $(PythonExecutable) setup.py bdist_wheel
              cd dist
              wheel=$(realpath $(ls))
              echo "wheel is: $wheel"
              $(PipExecutable) install $wheel
              $(PythonExecutable) -c "import pyomexmeta;pyomexmeta.run_tests()"

            displayName: Build Pip Wheel
          - task: CopyFiles@2
            inputs:
              sourceFolder: '$(INSTALL_DIRECTORY)'
              contents: '**'
              targetFolder: '$(Build.ArtifactStagingDirectory)/libomexmeta-$(PythonName)'
            displayName: Copy install to artifact staging area
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)/libomexmeta-$(PythonName)'
              artifactName: libOmexMeta-libomexmeta-manylinux2014-base-$(PythonName)
              Parallel: true
              ParallelCount: 8
