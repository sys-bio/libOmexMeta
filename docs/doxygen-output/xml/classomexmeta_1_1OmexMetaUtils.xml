<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classomexmeta_1_1OmexMetaUtils" kind="class" language="C++" prot="public">
    <compoundname>omexmeta::OmexMetaUtils</compoundname>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a28ab6d86e458158ac441457d74d0ebd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::OmexMetaUtils::OmexMetaUtils</definition>
        <argsstring>()=default</argsstring>
        <name>OmexMetaUtils</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="30" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1ab72b362607e6bbdd0025eefa574cd073" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::OmexMetaUtils::exists</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>exists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>return true when filename is a file that exists on system </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="36" column="21" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="11" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a9c445a8e0cc6589b25d6fa630686c171" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::OmexMetaUtils::removeFile</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>removeFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>remove file called </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 when successful. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="43" column="20" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="16" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a8e629136cb2685ed839ea3a0e88094e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::OmexMetaUtils::removeIfExists</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>removeIfExists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>remove a file, checking for its existance first </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="49" column="21" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="25" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a046b603d6308242b70b55de6cb72325c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::OmexMetaUtils::download</definition>
        <argsstring>(const std::string &amp;url, std::string filename)</argsstring>
        <name>download</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>url</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>download a file from </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>to</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para><verbatim>wrapper around the CurlGet function, as the utils
</verbatim> class seems like a good place for the download features. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="54" column="21" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="35" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1aac769ce6e901f32820cd7dc3fef989fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; omexmeta::OmexMetaUtils::splitStringBy</definition>
        <argsstring>(const std::string &amp;str, char delimiter)</argsstring>
        <name>splitStringBy</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delimiter</declname>
        </param>
        <briefdescription>
<para>split a string into a vector of strings by </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delimiter</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="59" column="28" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="39" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1ad47205ad2bcb06742ce96c5aaca8d493" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::OmexMetaUtils::generateUniqueMetaid</definition>
        <argsstring>(LibrdfModel &amp;model, const std::string &amp;metaid_base, const std::vector&lt; std::string &gt; &amp;exclusions)</argsstring>
        <name>generateUniqueMetaid</name>
        <param>
          <type><ref refid="classredland_1_1LibrdfModel" kindref="compound">LibrdfModel</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>metaid_base</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>exclusions</declname>
        </param>
        <briefdescription>
<para>utility for generating unique metaids given an xml document </para>
        </briefdescription>
        <detaileddescription>
<para>model a librdf_model* pointer</para>
<para>a string that will be used for the ID. There will be 4 digits, though this can be changed.</para>
<para>exclusions. Mostly needed internally for dealing with metaids that already exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="67" column="28" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="62" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a6694715cf3f5dccd33d416ecc84ff375" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::OmexMetaUtils::prepareBaseUri</definition>
        <argsstring>(std::string str, bool absolute_path=false)</argsstring>
        <name>prepareBaseUri</name>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>absolute_path</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>process a string intended to be a base uri. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string that will become a base uri </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>absolute_path</parametername>
</parameternamelist>
<parameterdescription>
<para>automatically make str an absolute path to the current working directory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Base uri&apos;s are important in redland libraries. If they do not begin with <computeroutput><ulink url="file://">file://</ulink></computeroutput> <computeroutput>http</computeroutput> or <computeroutput>https</computeroutput>, sparql querying will break down. <ref refid="classThis" kindref="compound">This</ref> is a helper function to ensure the base uri is properly formatted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="81" column="28" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="104" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a0956bde073b212596d8e4b2ffc983e47" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::OmexMetaUtils::getNamespaceFromUri</definition>
        <argsstring>(const std::string &amp;uri)</argsstring>
        <name>getNamespaceFromUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
<para>takes a uri as std::string and returns the string with the last section removed; </para>
        </briefdescription>
        <detaileddescription>
<para>Example: www.uri.com/identifer/PD12345 will turn into www.uri.com/identifier/ </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="90" column="28" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="132" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1af663724f2efb0324a64c6a57e8491c13" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::OmexMetaUtils::isFormattedUri</definition>
        <argsstring>(std::string uri)</argsstring>
        <name>isFormattedUri</name>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
<para>helper function that returns true when uri starts with either <computeroutput><ulink url="https://">https://</ulink></computeroutput> <computeroutput><ulink url="http://">http://</ulink></computeroutput> or <computeroutput><ulink url="file://">file://</ulink></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>the uri to test. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="97" column="21" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="162" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a9c2b712b85f74fff9740477660f7b371" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::OmexMetaUtils::endsWith</definition>
        <argsstring>(std::string const &amp;full_string, std::string const &amp;ending)</argsstring>
        <name>endsWith</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>full_string</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>ending</declname>
        </param>
        <briefdescription>
<para>test to see whether a string ends with another string </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fullString</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ending</parametername>
</parameternamelist>
<parameterdescription>
<para>the ending to test for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="104" column="21" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="170" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a4ec81c80bf33d232331ea9ef0b94da61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::OmexMetaUtils::assertRegexMatchSplitByNewLine</definition>
        <argsstring>(const std::string &amp;expected_string, const std::string &amp;actual_string)</argsstring>
        <name>assertRegexMatchSplitByNewLine</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>expected_string</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>actual_string</declname>
        </param>
        <briefdescription>
<para>test that expected_string matches actual_string when split by new lines and matched as a regex </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="107" column="9" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="187" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a6ddc16d56f238ef7ff3c8ab355163ef7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::OmexMetaUtils::assertMatchByNewLine</definition>
        <argsstring>(const std::string &amp;expected_string, const std::string &amp;actual_string)</argsstring>
        <name>assertMatchByNewLine</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>expected_string</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>actual_string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="109" column="21" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="210" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a744a0575136f1cc60b76a6560a5595e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; omexmeta::OmexMetaUtils::configurePrefixStrings</definition>
        <argsstring>(std::string repository_name, std::string omex_name, std::string model_name)</argsstring>
        <name>configurePrefixStrings</name>
        <param>
          <type>std::string</type>
          <declname>repository_name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>omex_name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>model_name</declname>
        </param>
        <briefdescription>
<para>configures the &quot;OMEXlib&quot;, &quot;myOMEX&quot; and &quot;local&quot; prefixes @ param omex_name the name of the omex container your model is in </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the model your are annotating. Extension should be included or it will be given the &quot;.xml&quot; suffix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="119" column="9" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="228" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1ae645af49ce57dac8bd0e0eba9e39a6c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::OmexMetaUtils::concatMetaIdAndUri</definition>
        <argsstring>(std::string metaid, std::string uri)</argsstring>
        <name>concatMetaIdAndUri</name>
        <param>
          <type>std::string</type>
          <declname>metaid</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
<para>concatonate metaid and uri strings </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metaid</parametername>
</parameternamelist>
<parameterdescription>
<para>string. Like &quot;#metaid&quot; or &quot;metaid&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>string. Like &quot;https://omex-library/jeff2019.omex/mymodel.xml&quot; or &quot;https://omex-library/jeff2019.omex/mymodel.rdf&quot;</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Sometimes a uri has a trailing &quot;#&quot; and somtimes a metaid has a leading &quot;#&quot;. <ref refid="classThis" kindref="compound">This</ref> method concatonates whilst accounting for permutations of &quot;#&quot; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="128" column="28" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="272" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1aca2230ca99338b9dc0fc7d296b0c553b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::OmexMetaUtils::stringReplace</definition>
        <argsstring>(std::string str, const std::string &amp;string_to_replace, const std::string &amp;replacement)</argsstring>
        <name>stringReplace</name>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>string_to_replace</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>replacement</declname>
        </param>
        <briefdescription>
<para>replace a part of a string </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string_to_replace</parametername>
</parameternamelist>
<parameterdescription>
<para>from a main</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>with a replacement string</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replacement</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="135" column="9" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="299" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a66d58e0ebcbee1857b23ead70c87de7f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::OmexMetaUtils::startsWith</definition>
        <argsstring>(const std::string &amp;full_string, const std::string &amp;start)</argsstring>
        <name>startsWith</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>full_string</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>returns true when </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>full_string</parametername>
</parameternamelist>
<parameterdescription>
<para>starts with the substring</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="140" column="21" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a6f8e406b8798bd2f1f0ae0d1bd07ed2b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::OmexMetaUtils::stringInVector</definition>
        <argsstring>(std::vector&lt; std::string &gt; vec, const std::string &amp;string)</argsstring>
        <name>stringInVector</name>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>returns true when </para>
        </briefdescription>
        <detaileddescription>
<para>return true if</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>is in</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="145" column="21" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="312" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a718710d8ba7fc7598bd73a5456b3d903" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>xmlDoc *</type>
        <definition>xmlDoc * omexmeta::OmexMetaUtils::parseXmlDocument</definition>
        <argsstring>(const std::string &amp;xml_string)</argsstring>
        <name>parseXmlDocument</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>xml_string</declname>
        </param>
        <briefdescription>
<para>read an xml document using libxml2. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>xmlDoc*. Caller is responsible for calling xmlFreeDoc(doc). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="147" column="23" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="320" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a29cc8222c809162eadbc424a0687cbf3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::OmexMetaUtils::getXmlNodeProperty</definition>
        <argsstring>(xmlNode *node, const std::string &amp;property)</argsstring>
        <name>getXmlNodeProperty</name>
        <param>
          <type>xmlNode *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="149" column="28" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="329" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a1dbcd874b2b72531e7f4f9e82524d8e8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>xmlNode *</type>
        <definition>xmlNode * omexmeta::OmexMetaUtils::getChildElementCalled</definition>
        <argsstring>(xmlNode *node, const std::string &amp;name)</argsstring>
        <name>getChildElementCalled</name>
        <param>
          <type>xmlNode *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="151" column="24" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="343" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a4d6f7d2140c42435be9339edf975b949" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; xmlNode * &gt;</type>
        <definition>std::vector&lt; xmlNode * &gt; omexmeta::OmexMetaUtils::getAllChildElements</definition>
        <argsstring>(xmlNode *node)</argsstring>
        <name>getAllChildElements</name>
        <param>
          <type>xmlNode *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="153" column="28" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="355" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a96e93667c8799b9569cb30fc102b129b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::OmexMetaUtils::isSubString</definition>
        <argsstring>(const std::string &amp;full_string, const std::string &amp;substring)</argsstring>
        <name>isSubString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>full_string</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>substring</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="155" column="21" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a68c571d229b00a082f3b5c9ad2f10dbc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::OmexMetaUtils::readFromFile</definition>
        <argsstring>(const std::string &amp;file)</argsstring>
        <name>readFromFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>read </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>into std::string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="160" column="28" bodyfile="src/omexmeta/OmexMetaUtils.cpp" bodystart="371" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1OmexMetaUtils_1a2493ba8fb1c95d05faa9f206be566ba2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool omexmeta::OmexMetaUtils::isStringEmpty</definition>
        <argsstring>(T &amp;cls, const std::string &amp;s)</argsstring>
        <name>isStringEmpty</name>
        <param>
          <type>T &amp;</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>return true when </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>is empty OR equal to model or local uri&apos;s </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>must implement the methods getModelUri and getLocalUri </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="167" column="21" bodyfile="src/omexmeta/include/omexmeta/OmexMetaUtils.h" bodystart="167" bodyend="173"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/omexmeta/include/omexmeta/OmexMetaUtils.h" line="28" column="5" bodyfile="src/omexmeta/include/omexmeta/OmexMetaUtils.h" bodystart="28" bodyend="174"/>
    <listofallmembers>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a6ddc16d56f238ef7ff3c8ab355163ef7" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>assertMatchByNewLine</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a4ec81c80bf33d232331ea9ef0b94da61" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>assertRegexMatchSplitByNewLine</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1ae645af49ce57dac8bd0e0eba9e39a6c0" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>concatMetaIdAndUri</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a744a0575136f1cc60b76a6560a5595e9" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>configurePrefixStrings</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a046b603d6308242b70b55de6cb72325c" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>download</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a9c2b712b85f74fff9740477660f7b371" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>endsWith</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1ab72b362607e6bbdd0025eefa574cd073" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>exists</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1ad47205ad2bcb06742ce96c5aaca8d493" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>generateUniqueMetaid</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a4d6f7d2140c42435be9339edf975b949" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>getAllChildElements</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a1dbcd874b2b72531e7f4f9e82524d8e8" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>getChildElementCalled</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a0956bde073b212596d8e4b2ffc983e47" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>getNamespaceFromUri</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a29cc8222c809162eadbc424a0687cbf3" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>getXmlNodeProperty</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1af663724f2efb0324a64c6a57e8491c13" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>isFormattedUri</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a2493ba8fb1c95d05faa9f206be566ba2" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>isStringEmpty</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a96e93667c8799b9569cb30fc102b129b" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>isSubString</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a28ab6d86e458158ac441457d74d0ebd7" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>OmexMetaUtils</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a718710d8ba7fc7598bd73a5456b3d903" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>parseXmlDocument</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a6694715cf3f5dccd33d416ecc84ff375" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>prepareBaseUri</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a68c571d229b00a082f3b5c9ad2f10dbc" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>readFromFile</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a9c445a8e0cc6589b25d6fa630686c171" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>removeFile</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a8e629136cb2685ed839ea3a0e88094e6" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>removeIfExists</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1aac769ce6e901f32820cd7dc3fef989fa" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>splitStringBy</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a66d58e0ebcbee1857b23ead70c87de7f" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>startsWith</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1a6f8e406b8798bd2f1f0ae0d1bd07ed2b" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>stringInVector</name></member>
      <member refid="classomexmeta_1_1OmexMetaUtils_1aca2230ca99338b9dc0fc7d296b0c553b" prot="public" virt="non-virtual"><scope>omexmeta::OmexMetaUtils</scope><name>stringReplace</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
