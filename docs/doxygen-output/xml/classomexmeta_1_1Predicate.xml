<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classomexmeta_1_1Predicate" kind="class" language="C++" prot="public">
    <compoundname>omexmeta::Predicate</compoundname>
    <derivedcompoundref refid="classomexmeta_1_1BiomodelsBiologyQualifier" prot="public" virt="non-virtual">omexmeta::BiomodelsBiologyQualifier</derivedcompoundref>
    <derivedcompoundref refid="classomexmeta_1_1BiomodelsModelQualifier" prot="public" virt="non-virtual">omexmeta::BiomodelsModelQualifier</derivedcompoundref>
    <derivedcompoundref refid="classomexmeta_1_1DCTerm" prot="public" virt="non-virtual">omexmeta::DCTerm</derivedcompoundref>
    <derivedcompoundref refid="classomexmeta_1_1Foaf" prot="public" virt="non-virtual">omexmeta::Foaf</derivedcompoundref>
    <derivedcompoundref refid="classomexmeta_1_1SemSim" prot="public" virt="non-virtual">omexmeta::SemSim</derivedcompoundref>
    <includes refid="Predicate_8h" local="no">Predicate.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1Predicate_1afc79b0cc43eb11e4bc2fe0b305e551bc" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::Predicate::namespace_</definition>
        <argsstring></argsstring>
        <name>namespace_</name>
        <briefdescription>
<para>make a shared pointer from this <ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="166" column="21" bodyfile="src/omexmeta/include/omexmeta/Predicate.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Predicate_1ab626a5fd9fa8f302767d4ca544a9eff2" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::Predicate::term_</definition>
        <argsstring></argsstring>
        <name>term_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="166" column="32" bodyfile="src/omexmeta/include/omexmeta/Predicate.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Predicate_1a5dfbbc85f7bdc5a3e4da72913f6ce306" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::Predicate::prefix_</definition>
        <argsstring></argsstring>
        <name>prefix_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="166" column="38" bodyfile="src/omexmeta/include/omexmeta/Predicate.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Predicate_1a4fe359b93a9dea9b60f7bc28c1aa913b" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::Predicate::uri_</definition>
        <argsstring></argsstring>
        <name>uri_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="167" column="21" bodyfile="src/omexmeta/include/omexmeta/Predicate.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Predicate_1a14ae7768fbd3aaf444bcde8650910c0b" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; omexmeta::Predicate::valid_terms_</definition>
        <argsstring></argsstring>
        <name>valid_terms_</name>
        <initializer>{&quot;All&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="169" column="21" bodyfile="src/omexmeta/include/omexmeta/Predicate.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Predicate_1a1c062fe0337919ecbffba1f567b77048" prot="protected" static="no" mutable="no">
        <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
        <definition>LibrdfNode omexmeta::Predicate::node_</definition>
        <argsstring></argsstring>
        <name>node_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="171" column="20" bodyfile="src/omexmeta/include/omexmeta/Predicate.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1a897a506f4c1b31e38e42abd7b0f8314a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Predicate::Predicate</definition>
        <argsstring>()=default</argsstring>
        <name>Predicate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="32" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1ad5a91eb29204202d2f18816d09677622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Predicate::Predicate</definition>
        <argsstring>(const std::string &amp;namespace_, std::string term, std::string prefix)</argsstring>
        <name>Predicate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>namespace_</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>term</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
<para>construct a <ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref> from a namespace, term and prefix portion of a predicate </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>namespace_</parametername>
</parameternamelist>
<parameterdescription>
<para>the namespace portion of a predicate. i.e. <ulink url="http://biomodels.net/biology-qualifiers/">http://biomodels.net/biology-qualifiers/</ulink> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>term</parametername>
</parameternamelist>
<parameterdescription>
<para>the last portion of the predicate, i.e. is </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>the prefix that can be used instead of the full namespace, i.e. bqbiol</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<ulink url="http://biomodels.net/biology-qualifiers/is">http://biomodels.net/biology-qualifiers/is</ulink> ------------------------------------<mdash/>|<ndash/> | | namespace term</para>
<para>is equivalent to</para>
<para>bqbiol:is ---<mdash/>|<ndash/> | | prefix term </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="59" column="9" bodyfile="src/omexmeta/Predicate.cpp" bodystart="10" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1a28edc476ba8cd53a51c6a1d60a40f133" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Predicate::Predicate</definition>
        <argsstring>(LibrdfNode node)</argsstring>
        <name>Predicate</name>
        <param>
          <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="62" column="18" bodyfile="src/omexmeta/Predicate.cpp" bodystart="22" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1a5db1e6150f8cfd7605e82996e2aebb50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::Predicate::operator==</definition>
        <argsstring>(const Predicate &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="64" column="14" bodyfile="src/omexmeta/Predicate.cpp" bodystart="175" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1a7bf4b8769eb9801eb26cc976723b56f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::Predicate::operator!=</definition>
        <argsstring>(const Predicate &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="66" column="14" bodyfile="src/omexmeta/Predicate.cpp" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1a9d51ebf565f39fb4d6d4f58c1b030edf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::Predicate::str</definition>
        <argsstring>()</argsstring>
        <name>str</name>
        <briefdescription>
<para>get the predicate as a full string </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a string representing the predicate </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="72" column="21" bodyfile="src/omexmeta/Predicate.cpp" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1aee19b8fc8b21f8e5ffd5b64691e1e530" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; std::string &gt; &amp;</type>
        <definition>const std::vector&lt; std::string &gt; &amp; omexmeta::Predicate::getValidTerms</definition>
        <argsstring>() const</argsstring>
        <name>getValidTerms</name>
        <briefdescription>
<para>stores the valid terms that are allowed in a particular predicate subclass </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector of strings</para>
</simplesect>
Subclasses override this method so they return a complete list of valid terms for their own class </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="99" column="28" bodyfile="src/omexmeta/Predicate.cpp" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1add4ab1cd86f83de3512279bbfdad947c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::Predicate::getNamespace</definition>
        <argsstring>() const</argsstring>
        <name>getNamespace</name>
        <briefdescription>
<para>getter for the namespace portion of the <ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the string representing the namespace of the current <ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="106" column="28" bodyfile="src/omexmeta/Predicate.cpp" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1a54a15176bd697d37d00573bf86954630" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::Predicate::getTerm</definition>
        <argsstring>() const</argsstring>
        <name>getTerm</name>
        <briefdescription>
<para>getter for term portion of the <ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the string representing the term portion of the <ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="112" column="28" bodyfile="src/omexmeta/Predicate.cpp" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1a0147e977f71604db05763815ae6b553f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::Predicate::getPrefix</definition>
        <argsstring>() const</argsstring>
        <name>getPrefix</name>
        <briefdescription>
<para>getter for the prefix portion of the <ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the string representing the prefix portion of the <ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="118" column="28" bodyfile="src/omexmeta/Predicate.cpp" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1a27fa7d62ad9a5182f3dd642bc61c8d9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::Predicate::getUri</definition>
        <argsstring>() const</argsstring>
        <name>getUri</name>
        <briefdescription>
<para>getter for uri </para>
        </briefdescription>
        <detaileddescription>
<para>For developers. Consider removing since <ref refid="classomexmeta_1_1Predicate_1a9d51ebf565f39fb4d6d4f58c1b030edf" kindref="member">str()</ref> method does the same thing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="125" column="29" bodyfile="src/omexmeta/Predicate.cpp" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1a718a37ff90ac0f2d7cc129e8351a2c7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Predicate::freeNode</definition>
        <argsstring>()</argsstring>
        <name>freeNode</name>
        <briefdescription>
<para>release resources associated with this <ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref> objects contain a librdf_node pointer which needs to be freed by the caller. If a <ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref> is passed to a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> object (which most of the time is it), responsibility for deleting the contained librdf_node is transferred to the <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> object, which automatically clears up resources. If not, then it is the callers responsibility to call this method when they are done with <ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref> instances. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="139" column="14" bodyfile="src/omexmeta/Predicate.cpp" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1a176c7f9d009100931376ee6a87779e3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Predicate::setNode</definition>
        <argsstring>(LibrdfNode &amp;node)</argsstring>
        <name>setNode</name>
        <param>
          <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>replace the current librdf_node assicated with this <ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref> with node </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the new librdf_node pointer to use in the <ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="155" column="14" bodyfile="src/omexmeta/Predicate.cpp" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1ae2adc312e293aabfdbbffbb44018665b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
        <definition>LibrdfNode omexmeta::Predicate::getNode</definition>
        <argsstring>()</argsstring>
        <name>getNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="157" column="20" bodyfile="src/omexmeta/Predicate.cpp" bodystart="147" bodyend="149"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1a1291e3cd9727871f568e864e0f5af3f0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unordered_map&lt; std::string, std::string &gt;</type>
        <definition>std::unordered_map&lt; std::string, std::string &gt; omexmeta::Predicate::namespaceMap</definition>
        <argsstring>()</argsstring>
        <name>namespaceMap</name>
        <briefdescription>
<para>get a map namespaces and prefixes </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a unordered_map with namespaces as keys and prefixes as values </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="38" column="35" bodyfile="src/omexmeta/Predicate.cpp" bodystart="97" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1a1e7e59b8a48c9f89eeec73f3bbaea19c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Predicate::verify</definition>
        <argsstring>(std::vector&lt; std::string &gt; valid_terms, const std::string &amp;term)</argsstring>
        <name>verify</name>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>valid_terms</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
<para>Static method for checking validity of term against valid_terms. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>term</parametername>
</parameternamelist>
<parameterdescription>
<para>the term to validate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valid_terms</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of terms to validate term against</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Throws an error when term is not in valid_terms. Used by subclasses to verify user input. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="82" column="21" bodyfile="src/omexmeta/Predicate.cpp" bodystart="126" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1a8381c8b0c7bbaa27de29608cbff08bf5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::Predicate::namespaceKnown</definition>
        <argsstring>(const std::string &amp;ns)</argsstring>
        <name>namespaceKnown</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>ns</declname>
        </param>
        <briefdescription>
<para>check if we have &quot;know&quot; a namespace. Known namespaces are returned by <ref refid="classomexmeta_1_1Predicate_1a1291e3cd9727871f568e864e0f5af3f0" kindref="member">Predicate::namespaceMap()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ns</parametername>
</parameternamelist>
<parameterdescription>
<para>the namespace to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if we have seen the namespace ns before </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="91" column="21" bodyfile="src/omexmeta/Predicate.cpp" bodystart="86" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Predicate_1ac872644a6609cc8c11459237b3b781a6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Predicate::addSeenNamespaceToSerializer</definition>
        <argsstring>(LibrdfSerializer serializer, LibrdfNode predicate)</argsstring>
        <name>addSeenNamespaceToSerializer</name>
        <param>
          <type><ref refid="classredland_1_1LibrdfSerializer" kindref="compound">LibrdfSerializer</ref></type>
          <declname>serializer</declname>
        </param>
        <param>
          <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>utility for checking whether the uri in @parameter predicate has a namespace that we already know. If found, the namespace is added to @parameter serializer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Predicate.h" line="148" column="9" bodyfile="src/omexmeta/Predicate.cpp" bodystart="156" bodyend="173"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The predicate class creates and stores a URI node. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>omexmeta::DCTerm</label>
        <link refid="classomexmeta_1_1DCTerm"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>omexmeta::BiomodelsModelQualifier</label>
        <link refid="classomexmeta_1_1BiomodelsModelQualifier"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>omexmeta::BiomodelsBiologyQualifier</label>
        <link refid="classomexmeta_1_1BiomodelsBiologyQualifier"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>omexmeta::SemSim</label>
        <link refid="classomexmeta_1_1SemSim"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>omexmeta::Foaf</label>
        <link refid="classomexmeta_1_1Foaf"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>omexmeta::Predicate</label>
        <link refid="classomexmeta_1_1Predicate"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>redland::RedlandType&lt; ObjType, FreeFuncType &gt;</label>
        <link refid="classredland_1_1RedlandType"/>
      </node>
      <node id="2">
        <label>redland::LibrdfNode</label>
        <link refid="classredland_1_1LibrdfNode"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>RefCounted_librdf_node</label>
        <link refid="classredland_1_1RefCountedRedlandType"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>omexmeta::Predicate</label>
        <link refid="classomexmeta_1_1Predicate"/>
        <childnode refid="2" relation="usage">
          <edgelabel>node_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/omexmeta/include/omexmeta/Predicate.h" line="29" column="5" bodyfile="src/omexmeta/include/omexmeta/Predicate.h" bodystart="29" bodyend="172"/>
    <listofallmembers>
      <member refid="classomexmeta_1_1Predicate_1ac872644a6609cc8c11459237b3b781a6" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>addSeenNamespaceToSerializer</name></member>
      <member refid="classomexmeta_1_1Predicate_1a718a37ff90ac0f2d7cc129e8351a2c7b" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>freeNode</name></member>
      <member refid="classomexmeta_1_1Predicate_1add4ab1cd86f83de3512279bbfdad947c" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>getNamespace</name></member>
      <member refid="classomexmeta_1_1Predicate_1ae2adc312e293aabfdbbffbb44018665b" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>getNode</name></member>
      <member refid="classomexmeta_1_1Predicate_1a0147e977f71604db05763815ae6b553f" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>getPrefix</name></member>
      <member refid="classomexmeta_1_1Predicate_1a54a15176bd697d37d00573bf86954630" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>getTerm</name></member>
      <member refid="classomexmeta_1_1Predicate_1a27fa7d62ad9a5182f3dd642bc61c8d9f" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>getUri</name></member>
      <member refid="classomexmeta_1_1Predicate_1aee19b8fc8b21f8e5ffd5b64691e1e530" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>getValidTerms</name></member>
      <member refid="classomexmeta_1_1Predicate_1afc79b0cc43eb11e4bc2fe0b305e551bc" prot="protected" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>namespace_</name></member>
      <member refid="classomexmeta_1_1Predicate_1a8381c8b0c7bbaa27de29608cbff08bf5" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>namespaceKnown</name></member>
      <member refid="classomexmeta_1_1Predicate_1a1291e3cd9727871f568e864e0f5af3f0" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>namespaceMap</name></member>
      <member refid="classomexmeta_1_1Predicate_1a1c062fe0337919ecbffba1f567b77048" prot="protected" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>node_</name></member>
      <member refid="classomexmeta_1_1Predicate_1a7bf4b8769eb9801eb26cc976723b56f2" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1Predicate_1a5db1e6150f8cfd7605e82996e2aebb50" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1Predicate_1a897a506f4c1b31e38e42abd7b0f8314a" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>Predicate</name></member>
      <member refid="classomexmeta_1_1Predicate_1ad5a91eb29204202d2f18816d09677622" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>Predicate</name></member>
      <member refid="classomexmeta_1_1Predicate_1a28edc476ba8cd53a51c6a1d60a40f133" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>Predicate</name></member>
      <member refid="classomexmeta_1_1Predicate_1a5dfbbc85f7bdc5a3e4da72913f6ce306" prot="protected" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>prefix_</name></member>
      <member refid="classomexmeta_1_1Predicate_1a176c7f9d009100931376ee6a87779e3c" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>setNode</name></member>
      <member refid="classomexmeta_1_1Predicate_1a9d51ebf565f39fb4d6d4f58c1b030edf" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>str</name></member>
      <member refid="classomexmeta_1_1Predicate_1ab626a5fd9fa8f302767d4ca544a9eff2" prot="protected" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>term_</name></member>
      <member refid="classomexmeta_1_1Predicate_1a4fe359b93a9dea9b60f7bc28c1aa913b" prot="protected" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>uri_</name></member>
      <member refid="classomexmeta_1_1Predicate_1a14ae7768fbd3aaf444bcde8650910c0b" prot="protected" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>valid_terms_</name></member>
      <member refid="classomexmeta_1_1Predicate_1a1e7e59b8a48c9f89eeec73f3bbaea19c" prot="public" virt="non-virtual"><scope>omexmeta::Predicate</scope><name>verify</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
