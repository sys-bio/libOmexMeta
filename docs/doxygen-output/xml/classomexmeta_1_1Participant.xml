<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classomexmeta_1_1Participant" kind="class" language="C++" prot="public">
    <compoundname>omexmeta::Participant</compoundname>
    <derivedcompoundref refid="classomexmeta_1_1MediatorParticipant" prot="public" virt="non-virtual">omexmeta::MediatorParticipant</derivedcompoundref>
    <derivedcompoundref refid="classomexmeta_1_1SinkParticipant" prot="public" virt="non-virtual">omexmeta::SinkParticipant</derivedcompoundref>
    <derivedcompoundref refid="classomexmeta_1_1SourceParticipant" prot="public" virt="non-virtual">omexmeta::SourceParticipant</derivedcompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1Participant_1a1678487babe1fd4ccdb94bdb51c3cd00" prot="private" static="no" mutable="no">
        <type><ref refid="classredland_1_1LibrdfModel" kindref="compound">LibrdfModel</ref> &amp;</type>
        <definition>LibrdfModel&amp; omexmeta::Participant::model_</definition>
        <argsstring></argsstring>
        <name>model_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="145" column="21" bodyfile="src/omexmeta/include/omexmeta/Participant.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Participant_1aa947afd3fb5d53a7bd2029261f5be45e" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::Participant::metaid_template_str_</definition>
        <argsstring></argsstring>
        <name>metaid_template_str_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="146" column="21" bodyfile="src/omexmeta/include/omexmeta/Participant.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Participant_1acc6eb18feca176230dfd107f94a7b0db" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::Participant::semsim_predicate_term_</definition>
        <argsstring></argsstring>
        <name>semsim_predicate_term_</name>
        <briefdescription>
<para>like <ref refid="classomexmeta_1_1SourceParticipant" kindref="compound">SourceParticipant</ref> in SourceParticipant0000 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="147" column="21" bodyfile="src/omexmeta/include/omexmeta/Participant.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Participant_1aba352cbcc6db3a2df58c08d544c8e3bd" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double omexmeta::Participant::multiplier_</definition>
        <argsstring></argsstring>
        <name>multiplier_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="148" column="16" bodyfile="src/omexmeta/include/omexmeta/Participant.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Participant_1ae0d944207f96c78ccfc0002a7084d861" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::Participant::physicalEntityReference_</definition>
        <argsstring></argsstring>
        <name>physicalEntityReference_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="149" column="21" bodyfile="src/omexmeta/include/omexmeta/Participant.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Participant_1a2d1b200f736249f791559b5b65afea2d" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::Participant::local_participant_metaid_</definition>
        <argsstring></argsstring>
        <name>local_participant_metaid_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="153" column="21" bodyfile="src/omexmeta/include/omexmeta/Participant.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Participant_1ac5d451ba48c63052ab60ce9627c7931d" prot="private" static="no" mutable="no">
        <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
        <definition>UriHandler&amp; omexmeta::Participant::uriHandler_</definition>
        <argsstring></argsstring>
        <name>uriHandler_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="155" column="20" bodyfile="src/omexmeta/include/omexmeta/Participant.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Participant_1a375e3ece0c157e9e4cc6d3b05c53a21f" prot="private" static="no" mutable="no">
        <type>eUriType</type>
        <definition>eUriType omexmeta::Participant::type_</definition>
        <argsstring></argsstring>
        <name>type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="157" column="18" bodyfile="src/omexmeta/include/omexmeta/Participant.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classomexmeta_1_1Participant_1a1727bd3a3080af7e40e9e5957eb538cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Participant::Participant</definition>
        <argsstring>(LibrdfModel &amp;model, std::string base_metaid, UriHandler &amp;uriHandler, std::string semsim_predicate_term, double multiplier, std::string physicalEntityReference, eUriType type)</argsstring>
        <name>Participant</name>
        <param>
          <type><ref refid="classredland_1_1LibrdfModel" kindref="compound">LibrdfModel</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>base_metaid</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>semsim_predicate_term</declname>
        </param>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>physicalEntityReference</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Superclass of participant types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the librdf_model* in use. Passed down from <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_metaid</parametername>
</parameternamelist>
<parameterdescription>
<para>the content of the participant base_metaid. A valid metaid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semsim_predicate_term</parametername>
</parameternamelist>
<parameterdescription>
<para>a string from the <ref refid="classomexmeta_1_1SemSim" kindref="compound">SemSim</ref> vocabulary. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the stoiciometry for the <ref refid="classomexmeta_1_1Participant" kindref="compound">Participant</ref> in the process </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>physicalEntityReference</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the physicalEntity assicated with the <ref refid="classomexmeta_1_1Participant" kindref="compound">Participant</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<ref refid="classThis" kindref="compound">This</ref> class should not be used directly - the subclasses should be preferred.</para>
<para>For developers - <ref refid="classThis" kindref="compound">This</ref> superclass is implemented in order to substantially reduce code duplication in the subclasses. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="40" column="9" bodyfile="src/omexmeta/Participant.cpp" bodystart="10" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Participant_1aee7846dcbb910dd394a0683841ab723a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Participant::setMultiplier</definition>
        <argsstring>(double multiplier)</argsstring>
        <name>setMultiplier</name>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
        </param>
        <briefdescription>
<para>setter for the multiplier field of <ref refid="classomexmeta_1_1Participant" kindref="compound">Participant</ref> types </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="47" column="14" bodyfile="src/omexmeta/Participant.cpp" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Participant_1a415c1205762dff6943426d830d74edcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Participant::setPhysicalEntityReference</definition>
        <argsstring>(const std::string &amp;physicalEntityReference)</argsstring>
        <name>setPhysicalEntityReference</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>physicalEntityReference</declname>
        </param>
        <briefdescription>
<para>setter for physical entity reference field of <ref refid="classomexmeta_1_1Participant" kindref="compound">Participant</ref> types </para>
        </briefdescription>
        <detaileddescription>
<para>A physical entity reference must exist and point to a physical entity in the xml. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="53" column="14" bodyfile="src/omexmeta/Participant.cpp" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Participant_1a8a6626e17aca48b76465d66928eee78f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::Participant::getLocalParticipantMetaid</definition>
        <argsstring>() const</argsstring>
        <name>getLocalParticipantMetaid</name>
        <briefdescription>
<para>return the local participant metaid. </para>
        </briefdescription>
        <detaileddescription>
<para>When <ref refid="classomexmeta_1_1Participant" kindref="compound">Participant</ref> types are created they are done so with a metaid that is local to the annotation document not to the model. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="61" column="28" bodyfile="src/omexmeta/Participant.cpp" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Participant_1a5e8f680950f55230587c0f85498c5047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Participant::setUniqueParticipantMetaid</definition>
        <argsstring>(const std::string &amp;uniqueParticipantMetaid)</argsstring>
        <name>setUniqueParticipantMetaid</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uniqueParticipantMetaid</declname>
        </param>
        <briefdescription>
<para>set the local participant metaid. </para>
        </briefdescription>
        <detaileddescription>
<para>When <ref refid="classomexmeta_1_1Participant" kindref="compound">Participant</ref> types are created they are done so with a metaid that is local to the annotation document not to the model. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="69" column="14" bodyfile="src/omexmeta/Participant.cpp" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Participant_1a6bf4c724ab5212d10f2a89893f369cd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::Participant::getLocalUri</definition>
        <argsstring>() const</argsstring>
        <name>getLocalUri</name>
        <briefdescription>
<para>getter for local uri attribute </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="74" column="28" bodyfile="src/omexmeta/Participant.cpp" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Participant_1a395bc8d2561149a77371ed80e2ed1517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Participant::free</definition>
        <argsstring>()</argsstring>
        <name>free</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>@biref currently more of a placeholder so as to not break the tests. todo remove this method, <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> objects deal with memory for Participants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="81" column="15" bodyfile="src/omexmeta/Participant.cpp" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Participant_1a78529cee5b9d5b30d76f937af652d4f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Participant::~Participant</definition>
        <argsstring>()=default</argsstring>
        <name>~Participant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="83" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Participant_1ad3db317039b403fdb7728885152cbeda" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::Participant::operator==</definition>
        <argsstring>(const Participant &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1Participant" kindref="compound">Participant</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="85" column="14" bodyfile="src/omexmeta/Participant.cpp" bodystart="100" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Participant_1aa4baa62cb4ccffe8443262382490328d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::Participant::operator!=</definition>
        <argsstring>(const Participant &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1Participant" kindref="compound">Participant</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="87" column="14" bodyfile="src/omexmeta/Participant.cpp" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Participant_1aabb81b9996c05ce9519c44f5d1d529db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref></type>
        <definition>Triples omexmeta::Participant::toTriples</definition>
        <argsstring>(std::string about, std::vector&lt; std::string &gt; &amp;metaid_exclusions)</argsstring>
        <name>toTriples</name>
        <param>
          <type>std::string</type>
          <declname>about</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>metaid_exclusions</declname>
        </param>
        <briefdescription>
<para>create a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object from the <ref refid="classomexmeta_1_1Participant" kindref="compound">Participant</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>about</parametername>
</parameternamelist>
<parameterdescription>
<para>the metaid for a process </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> container for the <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> associated with this <ref refid="classomexmeta_1_1Participant" kindref="compound">Participant</ref></para>
</simplesect>
The same toTriples method is used for all participants. </para>
        </detaileddescription>
        <inbodydescription>
<para>Since <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref>&apos;s are added to the model as a unit, we need a way of keeping track of which metaids have been used in order to ensure unique metaid&apos;s when we have more than one Sink/Source/Mediate <ref refid="classomexmeta_1_1Participant" kindref="compound">Participant</ref>. For this we add the generated metaid to a vector. Note, we do this before concat with local uri because of the way local_uri&apos;s were added after the original design was in place. Future developers might want to look at this.</para>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="96" column="18" bodyfile="src/omexmeta/Participant.cpp" bodystart="30" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Participant_1a03a1ffc7e9efaed5c0e94a62f7c72650" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::Participant::createMetaid</definition>
        <argsstring>(const std::string &amp;base, std::vector&lt; std::string &gt; &amp;metaid_exclusions) const</argsstring>
        <name>createMetaid</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>metaid_exclusions</declname>
        </param>
        <briefdescription>
<para>create a new metaid use base </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="102" column="22" bodyfile="src/omexmeta/Participant.cpp" bodystart="25" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Participant_1aa09f8c5736dd172b03d7898519d9478d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::basic_string&lt; char &gt;</type>
        <definition>std::basic_string&lt; char &gt; omexmeta::Participant::getPredicate</definition>
        <argsstring>()</argsstring>
        <name>getPredicate</name>
        <briefdescription>
<para>get the predicate currently in use by the participant </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a <ref refid="classomexmeta_1_1SemSim" kindref="compound">SemSim</ref> predicate </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="110" column="27" bodyfile="src/omexmeta/Participant.cpp" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Participant_1a1188d6a2036514eb6b649ce1e08eca4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Participant::setPredicate</definition>
        <argsstring>(const std::string &amp;semsim_predicate_string)</argsstring>
        <name>setPredicate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>semsim_predicate_string</declname>
        </param>
        <briefdescription>
<para>set the predicate used in the participant </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>semsim_predicate_string</parametername>
</parameternamelist>
<parameterdescription>
<para>The predicate portion of the <ref refid="classomexmeta_1_1SemSim" kindref="compound">SemSim</ref> predicate you want to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
i.e. &quot;hasSourceParticipant&quot; not &quot;http://www.bhi.washington.edu/semsim#hasSourceParticipant&quot; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="118" column="14" bodyfile="src/omexmeta/Participant.cpp" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Participant_1a232d2e7fe124ee13650d666fdfc3b866" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::Participant::getSubject</definition>
        <argsstring>() const</argsstring>
        <name>getSubject</name>
        <briefdescription>
<para>get the subject portion of the <ref refid="classomexmeta_1_1Participant" kindref="compound">Participant</ref>, which is the </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the string of the subject value metaid of the <ref refid="classomexmeta_1_1Participant" kindref="compound">Participant</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="125" column="28" bodyfile="src/omexmeta/Participant.cpp" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Participant_1a79b467cfc699483fdfe5e7686cc5447e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double omexmeta::Participant::getMultiplier</definition>
        <argsstring>() const</argsstring>
        <name>getMultiplier</name>
        <briefdescription>
<para>get the multiplier representing the stoiciometry of the process being described </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the multiplier </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="131" column="17" bodyfile="src/omexmeta/Participant.cpp" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Participant_1a40a5858db6aaae7ec7095b320de838d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::Participant::getPhysicalEntityReference</definition>
        <argsstring>() const</argsstring>
        <name>getPhysicalEntityReference</name>
        <briefdescription>
<para>get the physicalEntityReference </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the physicalEntityReference string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="137" column="28" bodyfile="src/omexmeta/Participant.cpp" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Participant_1ae78613f8d39ccfc23fc3624deb960fb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::Participant::getModelUri</definition>
        <argsstring>() const</argsstring>
        <name>getModelUri</name>
        <briefdescription>
<para>getter for model_uri_ attribute </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Participant.h" line="142" column="28" bodyfile="src/omexmeta/Participant.cpp" bodystart="134" bodyend="136"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>omexmeta::Participant</label>
        <link refid="classomexmeta_1_1Participant"/>
      </node>
      <node id="4">
        <label>omexmeta::SourceParticipant</label>
        <link refid="classomexmeta_1_1SourceParticipant"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>omexmeta::SinkParticipant</label>
        <link refid="classomexmeta_1_1SinkParticipant"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>omexmeta::MediatorParticipant</label>
        <link refid="classomexmeta_1_1MediatorParticipant"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="src/omexmeta/include/omexmeta/Participant.h" line="23" column="5" bodyfile="src/omexmeta/include/omexmeta/Participant.h" bodystart="23" bodyend="158"/>
    <listofallmembers>
      <member refid="classomexmeta_1_1Participant_1a03a1ffc7e9efaed5c0e94a62f7c72650" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>createMetaid</name></member>
      <member refid="classomexmeta_1_1Participant_1a395bc8d2561149a77371ed80e2ed1517" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>free</name></member>
      <member refid="classomexmeta_1_1Participant_1a8a6626e17aca48b76465d66928eee78f" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>getLocalParticipantMetaid</name></member>
      <member refid="classomexmeta_1_1Participant_1a6bf4c724ab5212d10f2a89893f369cd1" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>getLocalUri</name></member>
      <member refid="classomexmeta_1_1Participant_1ae78613f8d39ccfc23fc3624deb960fb0" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>getModelUri</name></member>
      <member refid="classomexmeta_1_1Participant_1a79b467cfc699483fdfe5e7686cc5447e" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>getMultiplier</name></member>
      <member refid="classomexmeta_1_1Participant_1a40a5858db6aaae7ec7095b320de838d1" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>getPhysicalEntityReference</name></member>
      <member refid="classomexmeta_1_1Participant_1aa09f8c5736dd172b03d7898519d9478d" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>getPredicate</name></member>
      <member refid="classomexmeta_1_1Participant_1a232d2e7fe124ee13650d666fdfc3b866" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>getSubject</name></member>
      <member refid="classomexmeta_1_1Participant_1a2d1b200f736249f791559b5b65afea2d" prot="private" virt="non-virtual"><scope>omexmeta::Participant</scope><name>local_participant_metaid_</name></member>
      <member refid="classomexmeta_1_1Participant_1aa947afd3fb5d53a7bd2029261f5be45e" prot="private" virt="non-virtual"><scope>omexmeta::Participant</scope><name>metaid_template_str_</name></member>
      <member refid="classomexmeta_1_1Participant_1a1678487babe1fd4ccdb94bdb51c3cd00" prot="private" virt="non-virtual"><scope>omexmeta::Participant</scope><name>model_</name></member>
      <member refid="classomexmeta_1_1Participant_1aba352cbcc6db3a2df58c08d544c8e3bd" prot="private" virt="non-virtual"><scope>omexmeta::Participant</scope><name>multiplier_</name></member>
      <member refid="classomexmeta_1_1Participant_1aa4baa62cb4ccffe8443262382490328d" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1Participant_1ad3db317039b403fdb7728885152cbeda" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1Participant_1a1727bd3a3080af7e40e9e5957eb538cd" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>Participant</name></member>
      <member refid="classomexmeta_1_1Participant_1ae0d944207f96c78ccfc0002a7084d861" prot="private" virt="non-virtual"><scope>omexmeta::Participant</scope><name>physicalEntityReference_</name></member>
      <member refid="classomexmeta_1_1Participant_1acc6eb18feca176230dfd107f94a7b0db" prot="private" virt="non-virtual"><scope>omexmeta::Participant</scope><name>semsim_predicate_term_</name></member>
      <member refid="classomexmeta_1_1Participant_1aee7846dcbb910dd394a0683841ab723a" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>setMultiplier</name></member>
      <member refid="classomexmeta_1_1Participant_1a415c1205762dff6943426d830d74edcd" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>setPhysicalEntityReference</name></member>
      <member refid="classomexmeta_1_1Participant_1a1188d6a2036514eb6b649ce1e08eca4d" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>setPredicate</name></member>
      <member refid="classomexmeta_1_1Participant_1a5e8f680950f55230587c0f85498c5047" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>setUniqueParticipantMetaid</name></member>
      <member refid="classomexmeta_1_1Participant_1aabb81b9996c05ce9519c44f5d1d529db" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>toTriples</name></member>
      <member refid="classomexmeta_1_1Participant_1a375e3ece0c157e9e4cc6d3b05c53a21f" prot="private" virt="non-virtual"><scope>omexmeta::Participant</scope><name>type_</name></member>
      <member refid="classomexmeta_1_1Participant_1ac5d451ba48c63052ab60ce9627c7931d" prot="private" virt="non-virtual"><scope>omexmeta::Participant</scope><name>uriHandler_</name></member>
      <member refid="classomexmeta_1_1Participant_1a78529cee5b9d5b30d76f937af652d4f0" prot="public" virt="non-virtual"><scope>omexmeta::Participant</scope><name>~Participant</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
