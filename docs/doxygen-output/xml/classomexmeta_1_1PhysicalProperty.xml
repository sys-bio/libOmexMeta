<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classomexmeta_1_1PhysicalProperty" kind="class" language="C++" prot="public">
    <compoundname>omexmeta::PhysicalProperty</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProperty_1a6ae73e803b715d79b6900cf8b8867a8a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; omexmeta::PhysicalProperty::new_metaid_exclusion_list_</definition>
        <argsstring></argsstring>
        <name>new_metaid_exclusion_list_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="71" column="21" bodyfile="src/omexmeta/include/omexmeta/PhysicalProperty.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProperty_1afdab2807139903007a406fb67a7a4458" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::PhysicalProperty::is_property_of_value_</definition>
        <argsstring></argsstring>
        <name>is_property_of_value_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="72" column="21" bodyfile="src/omexmeta/include/omexmeta/PhysicalProperty.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProperty_1a0bf8eca6d996849ef0d3092226ca2e79" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::PhysicalProperty::is_version_of_value_</definition>
        <argsstring></argsstring>
        <name>is_version_of_value_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="73" column="21" bodyfile="src/omexmeta/include/omexmeta/PhysicalProperty.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProperty_1aa6739d4c58f1daa524bd96ea123f9b0f" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::PhysicalProperty::property_metaid_base_</definition>
        <argsstring></argsstring>
        <name>property_metaid_base_</name>
        <initializer>= &quot;Property&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="74" column="21" bodyfile="src/omexmeta/include/omexmeta/PhysicalProperty.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProperty_1a58c0bfc4cee0998e1d7aaaff9b8c7ff0" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::PhysicalProperty::property_bearer_base_</definition>
        <argsstring></argsstring>
        <name>property_bearer_base_</name>
        <initializer>= &quot;Entity&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="75" column="21" bodyfile="src/omexmeta/include/omexmeta/PhysicalProperty.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProperty_1acdec5ae85563d2b3f92a9ea15e2bf060" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::PhysicalProperty::about_value_</definition>
        <argsstring></argsstring>
        <name>about_value_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="76" column="21" bodyfile="src/omexmeta/include/omexmeta/PhysicalProperty.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProperty_1afd8bace75c4bd9449867ee6ae5a58e4b" prot="private" static="no" mutable="no">
        <type><ref refid="classredland_1_1LibrdfModel" kindref="compound">LibrdfModel</ref> &amp;</type>
        <definition>LibrdfModel&amp; omexmeta::PhysicalProperty::model_</definition>
        <argsstring></argsstring>
        <name>model_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="78" column="21" bodyfile="src/omexmeta/include/omexmeta/PhysicalProperty.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProperty_1a44b8fe9de1697e10b1d505b2e84abd52" prot="private" static="no" mutable="no">
        <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
        <definition>UriHandler&amp; omexmeta::PhysicalProperty::uriHandler_</definition>
        <argsstring></argsstring>
        <name>uriHandler_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="80" column="20" bodyfile="src/omexmeta/include/omexmeta/PhysicalProperty.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProperty_1a7816274c77919713b49b7f91d4355339" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool omexmeta::PhysicalProperty::is_set_</definition>
        <argsstring></argsstring>
        <name>is_set_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicator to let classes which use the <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> know whether a particular instance of physical property has been set by calling the hasProperty() method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="87" column="14" bodyfile="src/omexmeta/include/omexmeta/PhysicalProperty.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1ace1dfc8b0c7fc6bb23cd3d8c2126a49f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalProperty::PhysicalProperty</definition>
        <argsstring>(LibrdfModel &amp;model, UriHandler &amp;uriHandler)</argsstring>
        <name>PhysicalProperty</name>
        <param>
          <type><ref refid="classredland_1_1LibrdfModel" kindref="compound">LibrdfModel</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="26" column="9" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="12" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1a6080d0966cd4f0d1912dd0cf914caf5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalProperty::~PhysicalProperty</definition>
        <argsstring>()=default</argsstring>
        <name>~PhysicalProperty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="27" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1a41cd211e575a4cf4144fa2157f52747d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalProperty::PhysicalProperty</definition>
        <argsstring>(const PhysicalProperty &amp;physicalProperty)=default</argsstring>
        <name>PhysicalProperty</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> &amp;</type>
          <declname>physicalProperty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="28" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1a0c12f4fc60d445adf9a7086f76015474" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalProperty::PhysicalProperty</definition>
        <argsstring>(PhysicalProperty &amp;&amp;physicalProperty) noexcept=default</argsstring>
        <name>PhysicalProperty</name>
        <param>
          <type><ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> &amp;&amp;</type>
          <declname>physicalProperty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="29" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1af0fc85f08d59093673270cf74773823e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> &amp;</type>
        <definition>PhysicalProperty &amp; omexmeta::PhysicalProperty::operator=</definition>
        <argsstring>(const PhysicalProperty &amp;physicalProperty)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> &amp;</type>
          <declname>physicalProperty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="30" column="26" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="15" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1a8800365ed17c49d1a8e7eb2225bae169" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> &amp;</type>
        <definition>PhysicalProperty &amp; omexmeta::PhysicalProperty::operator=</definition>
        <argsstring>(PhysicalProperty &amp;&amp;physicalProperty) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> &amp;&amp;</type>
          <declname>physicalProperty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="31" column="26" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="29" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1a13a9ec404ea9c6d7ddea6c7398b67328" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::PhysicalProperty::isSet</definition>
        <argsstring>() const</argsstring>
        <name>isSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="33" column="14" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1a46f5436faa6f1c977088544bec31d125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::PhysicalProperty::setIsSet</definition>
        <argsstring>(bool isSet)</argsstring>
        <name>setIsSet</name>
        <param>
          <type>bool</type>
          <declname>isSet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="35" column="14" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="154" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1a101d24ba21354367e13406d1f68c9248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::PhysicalProperty::setPropertyMetaidBase</definition>
        <argsstring>(const std::string &amp;propertyMetaidBase)</argsstring>
        <name>setPropertyMetaidBase</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>propertyMetaidBase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="37" column="14" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1aa9f55839baebd3594e859d4ad8d080a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::PhysicalProperty::getPropertyBearerBase</definition>
        <argsstring>() const</argsstring>
        <name>getPropertyBearerBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="39" column="28" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1a1b521c8ed4752a27b0e667c766b9e304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::PhysicalProperty::setPropertyBearerBase</definition>
        <argsstring>(const std::string &amp;propertyBearerBase)</argsstring>
        <name>setPropertyBearerBase</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>propertyBearerBase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="41" column="14" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="148" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1a0f27071bfef5a9de4eb89fb21461ba76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::PhysicalProperty::getModelUri</definition>
        <argsstring>() const</argsstring>
        <name>getModelUri</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="44" column="28" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1a9810bdd4b71d035e6187347b640ce83f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::PhysicalProperty::getAbout</definition>
        <argsstring>() const</argsstring>
        <name>getAbout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="46" column="28" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1a8065f6509c81feb045a13bcfe43c11b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> &amp;</type>
        <definition>PhysicalProperty &amp; omexmeta::PhysicalProperty::about</definition>
        <argsstring>(const std::string &amp;about, eUriType type=eUriType::NONE)</argsstring>
        <name>about</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>about</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>type</declname>
          <defval>eUriType::NONE</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="48" column="26" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="113" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1a182ba6fca7c913219ccd50e006cfbb61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::PhysicalProperty::getIsVersionOfValue</definition>
        <argsstring>() const</argsstring>
        <name>getIsVersionOfValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="50" column="28" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1af2e63778f1281f871a99e216bfcbaf88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref></type>
        <definition>Triples omexmeta::PhysicalProperty::toTriples</definition>
        <argsstring>()</argsstring>
        <name>toTriples</name>
        <briefdescription>
<para>creates a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object using the information in the <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object containing the set of <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> object used to represent this <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="56" column="18" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="63" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1a57779b9711e41a3e70213190759b3d32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> &amp;</type>
        <definition>PhysicalProperty &amp; omexmeta::PhysicalProperty::isPropertyOf</definition>
        <argsstring>(const std::string &amp;is_property_of, eUriType type)</argsstring>
        <name>isPropertyOf</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>is_property_of</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="58" column="26" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1a30ca01ca75b8ccb6293f515439b00e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> &amp;</type>
        <definition>PhysicalProperty &amp; omexmeta::PhysicalProperty::isVersionOf</definition>
        <argsstring>(const std::string &amp;resource)</argsstring>
        <name>isVersionOf</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="60" column="26" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1ab498df5bb21e010614ae43c0c8e70bb7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::PhysicalProperty::getLocalUri</definition>
        <argsstring>() const</argsstring>
        <name>getLocalUri</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="62" column="28" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1a6981edb407fb11b81eebccbc8f7aa94a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::PhysicalProperty::getIsPropertyOfValue</definition>
        <argsstring>() const</argsstring>
        <name>getIsPropertyOfValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="64" column="28" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1acd67e442b842ba57daf0653467b8a682" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::PhysicalProperty::getPropertyMetaidBase</definition>
        <argsstring>() const</argsstring>
        <name>getPropertyMetaidBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="66" column="28" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1af3b3379a751ebb15f7a5ea0cae8cb4d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::PhysicalProperty::operator==</definition>
        <argsstring>(const PhysicalProperty &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="67" column="14" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="43" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProperty_1a1a85ba2c50f5b79e49e8a01b96756f0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::PhysicalProperty::operator!=</definition>
        <argsstring>(const PhysicalProperty &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="68" column="14" bodyfile="src/omexmeta/PhysicalProperty.cpp" bodystart="54" bodyend="56"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/omexmeta/include/omexmeta/PhysicalProperty.h" line="23" column="5" bodyfile="src/omexmeta/include/omexmeta/PhysicalProperty.h" bodystart="23" bodyend="88"/>
    <listofallmembers>
      <member refid="classomexmeta_1_1PhysicalProperty_1a8065f6509c81feb045a13bcfe43c11b5" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>about</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1acdec5ae85563d2b3f92a9ea15e2bf060" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>about_value_</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a9810bdd4b71d035e6187347b640ce83f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>getAbout</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a6981edb407fb11b81eebccbc8f7aa94a" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>getIsPropertyOfValue</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a182ba6fca7c913219ccd50e006cfbb61" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>getIsVersionOfValue</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1ab498df5bb21e010614ae43c0c8e70bb7" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>getLocalUri</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a0f27071bfef5a9de4eb89fb21461ba76" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>getModelUri</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1aa9f55839baebd3594e859d4ad8d080a2" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>getPropertyBearerBase</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1acd67e442b842ba57daf0653467b8a682" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>getPropertyMetaidBase</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1afdab2807139903007a406fb67a7a4458" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>is_property_of_value_</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a7816274c77919713b49b7f91d4355339" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>is_set_</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a0bf8eca6d996849ef0d3092226ca2e79" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>is_version_of_value_</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a57779b9711e41a3e70213190759b3d32" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>isPropertyOf</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a13a9ec404ea9c6d7ddea6c7398b67328" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>isSet</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a30ca01ca75b8ccb6293f515439b00e06" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>isVersionOf</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1afd8bace75c4bd9449867ee6ae5a58e4b" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>model_</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a6ae73e803b715d79b6900cf8b8867a8a" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>new_metaid_exclusion_list_</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a1a85ba2c50f5b79e49e8a01b96756f0a" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1af0fc85f08d59093673270cf74773823e" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a8800365ed17c49d1a8e7eb2225bae169" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1af3b3379a751ebb15f7a5ea0cae8cb4d6" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1ace1dfc8b0c7fc6bb23cd3d8c2126a49f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>PhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a41cd211e575a4cf4144fa2157f52747d" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>PhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a0c12f4fc60d445adf9a7086f76015474" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>PhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a58c0bfc4cee0998e1d7aaaff9b8c7ff0" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>property_bearer_base_</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1aa6739d4c58f1daa524bd96ea123f9b0f" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>property_metaid_base_</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a46f5436faa6f1c977088544bec31d125" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>setIsSet</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a1b521c8ed4752a27b0e667c766b9e304" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>setPropertyBearerBase</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a101d24ba21354367e13406d1f68c9248" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>setPropertyMetaidBase</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1af2e63778f1281f871a99e216bfcbaf88" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>toTriples</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a44b8fe9de1697e10b1d505b2e84abd52" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>uriHandler_</name></member>
      <member refid="classomexmeta_1_1PhysicalProperty_1a6080d0966cd4f0d1912dd0cf914caf5b" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProperty</scope><name>~PhysicalProperty</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
