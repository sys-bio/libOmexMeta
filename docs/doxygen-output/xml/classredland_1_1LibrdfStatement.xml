<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classredland_1_1LibrdfStatement" kind="class" language="C++" prot="public">
    <compoundname>redland::LibrdfStatement</compoundname>
    <basecompoundref refid="classredland_1_1RefCountedRedlandType" prot="public" virt="non-virtual">redland::RefCountedRedlandType&lt; librdf_statement, statement_free_func &gt;</basecompoundref>
    <derivedcompoundref refid="classomexmeta_1_1Triple" prot="public" virt="non-virtual">omexmeta::Triple</derivedcompoundref>
    <includes refid="LibrdfStatement_8h" local="no">LibrdfStatement.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classredland_1_1LibrdfStatement_1a4cbbbf99d094cea4569324a8c67789fb" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>redland::LibrdfStatement::LibrdfStatement</definition>
        <argsstring>(librdf_statement *statement)</argsstring>
        <name>LibrdfStatement</name>
        <param>
          <type><ref refid="structraptor__statement" kindref="compound">librdf_statement</ref> *</type>
          <declname>statement</declname>
        </param>
        <briefdescription>
<para>construct a <ref refid="classredland_1_1LibrdfStatement" kindref="compound">LibrdfStatement</ref> from an existing librdf_statement* pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>The reference is stolen, and subsequently managed by <ref refid="classredland_1_1LibrdfStatement" kindref="compound">LibrdfStatement</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfStatement.h" line="42" column="18" bodyfile="src/redland/RedlandWrapper/src/LibrdfStatement.cpp" bodystart="16" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfStatement_1a65d896e0bf026ff027ad8488bddf6384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>redland::LibrdfStatement::LibrdfStatement</definition>
        <argsstring>()</argsstring>
        <name>LibrdfStatement</name>
        <briefdescription>
<para>default construct an instance of librdf_statement*. </para>
        </briefdescription>
        <detaileddescription>
<para>Memory is owned by <ref refid="classredland_1_1LibrdfStatement" kindref="compound">LibrdfStatement</ref> and automatically destructed via RAII. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfStatement.h" line="49" column="9" bodyfile="src/redland/RedlandWrapper/src/LibrdfStatement.cpp" bodystart="11" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfStatement_1ada81e9bfb312e25daf20d6dda10eeb2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool redland::LibrdfStatement::operator==</definition>
        <argsstring>(const LibrdfStatement &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfStatement" kindref="compound">LibrdfStatement</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>equality operator. @detials equal if the three nodes contained by this statement are equal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfStatement.h" line="55" column="14" bodyfile="src/redland/RedlandWrapper/src/LibrdfStatement.cpp" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfStatement_1ad3d6c126b90c0d93413a08353c496f8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool redland::LibrdfStatement::operator!=</definition>
        <argsstring>(const LibrdfStatement &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfStatement" kindref="compound">LibrdfStatement</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>inequality operator. Inverse of equality operator </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfStatement.h" line="60" column="14" bodyfile="src/redland/RedlandWrapper/src/LibrdfStatement.cpp" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfStatement_1ae7f7e27b7a502070195103268407243a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>redland::LibrdfStatement::LibrdfStatement</definition>
        <argsstring>(const LibrdfNode &amp;subject, const LibrdfNode &amp;predicate, const LibrdfNode &amp;resource)</argsstring>
        <name>LibrdfStatement</name>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>subject</declname>
        </param>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>predicate</declname>
        </param>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
<para>construct a <ref refid="classredland_1_1LibrdfStatement" kindref="compound">LibrdfStatement</ref> from <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> objects. </para>
        </briefdescription>
        <detaileddescription>
<para>The memory associated with the constructed librdf_statement* is managed by RAII while the <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> types handled themselves, also by RAII. The reference count of the <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> types is incremented by 1 on instantiation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfStatement.h" line="75" column="9" bodyfile="src/redland/RedlandWrapper/src/LibrdfStatement.cpp" bodystart="21" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfStatement_1a2d7cc313572ac34e9822e97d6b23dd36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
        <definition>LibrdfNode redland::LibrdfStatement::getSubjectNode</definition>
        <argsstring>() const</argsstring>
        <name>getSubjectNode</name>
        <briefdescription>
<para>get the subject of this statement as a <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Ref count is incremented by 1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfStatement.h" line="81" column="21" bodyfile="src/redland/RedlandWrapper/src/LibrdfStatement.cpp" bodystart="50" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfStatement_1ade668892ca9383eacbf5517df4e8f8d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
        <definition>LibrdfNode redland::LibrdfStatement::getPredicateNode</definition>
        <argsstring>() const</argsstring>
        <name>getPredicateNode</name>
        <briefdescription>
<para>get the predicate of this statement as a <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Ref count is incremented by 1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfStatement.h" line="87" column="21" bodyfile="src/redland/RedlandWrapper/src/LibrdfStatement.cpp" bodystart="62" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfStatement_1a9d4376221d84e22d15eeb6393ea4afe3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
        <definition>LibrdfNode redland::LibrdfStatement::getResourceNode</definition>
        <argsstring>() const</argsstring>
        <name>getResourceNode</name>
        <briefdescription>
<para>get the resource of this statement as a <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Ref count is incremented by 1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfStatement.h" line="93" column="21" bodyfile="src/redland/RedlandWrapper/src/LibrdfStatement.cpp" bodystart="74" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfStatement_1a4935cf54fa2f367678319f1f2d837005" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void redland::LibrdfStatement::checkForNull</definition>
        <argsstring>() override</argsstring>
        <name>checkForNull</name>
        <reimplements refid="classredland_1_1RedlandType_1a86304e5a3e82aae8ea4aae868b4fa7e4">checkForNull</reimplements>
        <briefdescription>
<para>throws an error if any of the subject, predicate, resource or librdf_statement are nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfStatement.h" line="99" column="14" bodyfile="src/redland/RedlandWrapper/src/LibrdfStatement.cpp" bodystart="29" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfStatement_1a9133d53a9b24ac0f0499f23cb6e53d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void redland::LibrdfStatement::setSubject</definition>
        <argsstring>(const LibrdfNode &amp;node)</argsstring>
        <name>setSubject</name>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>set the subject of this <ref refid="classredland_1_1LibrdfStatement" kindref="compound">LibrdfStatement</ref> to node. </para>
        </briefdescription>
        <detaileddescription>
<para>reference count of node is incremented </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfStatement.h" line="106" column="14" bodyfile="src/redland/RedlandWrapper/src/LibrdfStatement.cpp" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfStatement_1a74151d5fae756918cfd9b22d51fb8d71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void redland::LibrdfStatement::setResource</definition>
        <argsstring>(const LibrdfNode &amp;node)</argsstring>
        <name>setResource</name>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>set the resource of this <ref refid="classredland_1_1LibrdfStatement" kindref="compound">LibrdfStatement</ref> to node. </para>
        </briefdescription>
        <detaileddescription>
<para>reference count of node is incremented </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfStatement.h" line="113" column="14" bodyfile="src/redland/RedlandWrapper/src/LibrdfStatement.cpp" bodystart="92" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfStatement_1a155e25bff7660b03c4253715fe5e8194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void redland::LibrdfStatement::setPredicate</definition>
        <argsstring>(const LibrdfNode &amp;node)</argsstring>
        <name>setPredicate</name>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>set the predicate of this <ref refid="classredland_1_1LibrdfStatement" kindref="compound">LibrdfStatement</ref> to node. </para>
        </briefdescription>
        <detaileddescription>
<para>reference count of node is incremented </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfStatement.h" line="120" column="14" bodyfile="src/redland/RedlandWrapper/src/LibrdfStatement.cpp" bodystart="98" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfStatement_1a84a6fae7f1879c2f033001a9927627b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool redland::LibrdfStatement::isComplete</definition>
        <argsstring>()</argsstring>
        <name>isComplete</name>
        <briefdescription>
<para>returns true when all of subject, predicate and resource nodes are not empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfStatement.h" line="126" column="14" bodyfile="src/redland/RedlandWrapper/src/LibrdfStatement.cpp" bodystart="112" bodyend="114"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classredland_1_1LibrdfStatement_1ac5acd1a9c67a8bd6f7b99098a7353424" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool redland::LibrdfStatement::equals</definition>
        <argsstring>(const LibrdfStatement &amp;first, const LibrdfStatement &amp;second)</argsstring>
        <name>equals</name>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfStatement" kindref="compound">LibrdfStatement</ref> &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfStatement" kindref="compound">LibrdfStatement</ref> &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>returns true if first equals second. </para>
        </briefdescription>
        <detaileddescription>
<para>All three of subject, predicate and resource nodes need to be equal before <ref refid="classredland_1_1LibrdfStatement_1ac5acd1a9c67a8bd6f7b99098a7353424" kindref="member">LibrdfStatement::equals</ref> returns true. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfStatement.h" line="67" column="21" bodyfile="src/redland/RedlandWrapper/src/LibrdfStatement.cpp" bodystart="124" bodyend="179"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>C++ wrapper around librdf_statement using RAII for memory management. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>redland::LibrdfStatement</label>
        <link refid="classredland_1_1LibrdfStatement"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>redland::RedlandType&lt; ObjType, FreeFuncType &gt;</label>
        <link refid="classredland_1_1RedlandType"/>
      </node>
      <node id="2">
        <label>RefCounted_librdf_statement</label>
        <link refid="classredland_1_1RefCountedRedlandType"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>omexmeta::Triple</label>
        <link refid="classomexmeta_1_1Triple"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>redland::LibrdfStatement</label>
        <link refid="classredland_1_1LibrdfStatement"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>redland::RedlandType&lt; ObjType, FreeFuncType &gt;</label>
        <link refid="classredland_1_1RedlandType"/>
      </node>
      <node id="2">
        <label>RefCounted_librdf_statement</label>
        <link refid="classredland_1_1RefCountedRedlandType"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfStatement.h" line="31" column="5" bodyfile="src/redland/RedlandWrapper/src/include/redland/LibrdfStatement.h" bodystart="31" bodyend="127"/>
    <listofallmembers>
      <member refid="classredland_1_1LibrdfStatement_1a4935cf54fa2f367678319f1f2d837005" prot="public" virt="virtual"><scope>redland::LibrdfStatement</scope><name>checkForNull</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ac5acd1a9c67a8bd6f7b99098a7353424" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>equals</name></member>
      <member refid="classredland_1_1RedlandType_1afd3a894521540cf05dfa56a3a59b25b9" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>freeFunc_</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a5e09c936eada4386171e23bc599f334f" prot="public" virt="virtual"><scope>redland::LibrdfStatement</scope><name>freeObj</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1aad3189482972131c1d253e7759fee33e" prot="public" virt="virtual"><scope>redland::LibrdfStatement</scope><name>get</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ade668892ca9383eacbf5517df4e8f8d8" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>getPredicateNode</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a9d4376221d84e22d15eeb6393ea4afe3" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>getResourceNode</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a2d7cc313572ac34e9822e97d6b23dd36" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>getSubjectNode</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a6984bffbdd92f2eaaf23e86f65044fb9" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>getUsage</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a688d681a2a77dcbd3223757912cc93b6" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>getWithoutIncrement</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1ae8d1c23cc4bb8a9df585c87765d857bb" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>incrementUsage</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a84a6fae7f1879c2f033001a9927627b0" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>isComplete</name></member>
      <member refid="classredland_1_1RedlandType_1ac6594279280345bd8a03c1a7e950d3e0" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>isNull</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a4cbbbf99d094cea4569324a8c67789fb" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>LibrdfStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a65d896e0bf026ff027ad8488bddf6384" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>LibrdfStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ae7f7e27b7a502070195103268407243a" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>LibrdfStatement</name></member>
      <member refid="classredland_1_1RedlandType_1ac9d0c3d245e2394c137ee0ab266784ed" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>obj_</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ad3d6c126b90c0d93413a08353c496f8f" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>operator!=</name></member>
      <member refid="classredland_1_1RedlandType_1a4b0707a7465ffb5952bae3651f8c6d41" prot="public" virt="non-virtual" ambiguityscope="redland::RefCountedRedlandType::"><scope>redland::LibrdfStatement</scope><name>operator!=</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1aa0d305fe2357f0f5370a5027e165506a" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>operator=</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a1ac9b3d35fbbc1f17fb474d61071690e" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>operator=</name></member>
      <member refid="classredland_1_1RedlandType_1a5dd5fd7edeb2b6c17e8c92eb7ba01cac" prot="public" virt="non-virtual" ambiguityscope="redland::RedlandType::"><scope>redland::LibrdfStatement</scope><name>operator=</name></member>
      <member refid="classredland_1_1RedlandType_1a22e381182a5642883ad578db40368f13" prot="public" virt="non-virtual" ambiguityscope="redland::RedlandType::"><scope>redland::LibrdfStatement</scope><name>operator=</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ada81e9bfb312e25daf20d6dda10eeb2e" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>operator==</name></member>
      <member refid="classredland_1_1RedlandType_1a9fc5b1ce564f4c2497855cd965df1cfd" prot="public" virt="non-virtual" ambiguityscope="redland::RefCountedRedlandType::"><scope>redland::LibrdfStatement</scope><name>operator==</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a3c3a57c6b73d9bea7e0a9cdb9a725006" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1ab7e0f16ed9acd6ba9c65b8e9259301e9" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a89f2c7b5d8133d7b22c54263ea2dcb3b" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a7884dd6bc66d9880090bb53f14683f1f" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RedlandType_1ab7e0f16ed9acd6ba9c65b8e9259301e9" prot="public" virt="non-virtual" ambiguityscope="redland::RedlandType::"><scope>redland::LibrdfStatement</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RedlandType_1a89f2c7b5d8133d7b22c54263ea2dcb3b" prot="public" virt="non-virtual" ambiguityscope="redland::RedlandType::"><scope>redland::LibrdfStatement</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RedlandType_1a7884dd6bc66d9880090bb53f14683f1f" prot="public" virt="non-virtual" ambiguityscope="redland::RedlandType::"><scope>redland::LibrdfStatement</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1ae0ca62ccfcffebe1f8d391fc80719fd7" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>RefCountedRedlandType</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1abb14a238dec2d35068c96d873ccef2da" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>RefCountedRedlandType</name></member>
      <member refid="classredland_1_1RedlandType_1aee7e39b6197cf77b19f873e3c2cea495" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>release</name></member>
      <member refid="classredland_1_1RedlandType_1ac3255173f68c11e2ebeb0d991fec24e7" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>setFreeFunc</name></member>
      <member refid="classredland_1_1RedlandType_1a403c5018a01ee1dc94e4caa33bef91e7" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>setObj</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a155e25bff7660b03c4253715fe5e8194" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>setPredicate</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a74151d5fae756918cfd9b22d51fb8d71" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>setResource</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a9133d53a9b24ac0f0499f23cb6e53d40" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>setSubject</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a8ce7a7bf352c4d91ae785a4468cf0960" prot="public" virt="non-virtual"><scope>redland::LibrdfStatement</scope><name>ThisType</name></member>
      <member refid="classredland_1_1RedlandType_1a028dab285bfd81fa4efca9206b0cd498" prot="public" virt="virtual"><scope>redland::LibrdfStatement</scope><name>~RedlandType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
