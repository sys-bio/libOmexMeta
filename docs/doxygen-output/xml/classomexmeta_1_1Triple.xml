<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classomexmeta_1_1Triple" kind="class" language="C++" prot="public">
    <compoundname>omexmeta::Triple</compoundname>
    <basecompoundref refid="classredland_1_1LibrdfStatement" prot="public" virt="non-virtual">redland::LibrdfStatement</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1Triple_1a36b093100ddf2b716b2d67336e1dffe4" prot="private" static="no" mutable="no">
        <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
        <definition>UriHandler&amp; omexmeta::Triple::uriHandler_</definition>
        <argsstring></argsstring>
        <name>uriHandler_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="118" column="20" bodyfile="src/omexmeta/include/omexmeta/Triple.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a9bbe27351665a72507570bd1da6b209c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::~Triple</definition>
        <argsstring>() override=default</argsstring>
        <name>~Triple</name>
        <briefdescription>
<para>only a default virtual destructor needed as call to base class destructor will clean up the underlying statement_ pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="44" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1aa28089d2e08463961811f98d70b1df8a" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::Triple</definition>
        <argsstring>(UriHandler &amp;uriHandler)</argsstring>
        <name>Triple</name>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="46" column="18" bodyfile="src/omexmeta/Triple.cpp" bodystart="12" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1ad160e8e90a25538cd5e3a8d46fae5cee" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::Triple</definition>
        <argsstring>(Triple &amp;&amp;triple) noexcept</argsstring>
        <name>Triple</name>
        <param>
          <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;&amp;</type>
          <declname>triple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="48" column="9" bodyfile="src/omexmeta/Triple.cpp" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a0831a005f3b781b73f7af661c3a903f8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::operator=</definition>
        <argsstring>(Triple &amp;&amp;triple) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;&amp;</type>
          <declname>triple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="50" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="19" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a79d8092e4fab78add6161890b2f3c624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::Triple</definition>
        <argsstring>(const Triple &amp;triple)</argsstring>
        <name>Triple</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
          <declname>triple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="52" column="9" bodyfile="src/omexmeta/Triple.cpp" bodystart="27" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a977b07d30a7d4895b6f6a4f75221df0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::operator=</definition>
        <argsstring>(const Triple &amp;triple)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
          <declname>triple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="54" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="31" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1ace642731214400b1c6d4ecff3b154598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::Triple</definition>
        <argsstring>(UriHandler &amp;uriHandler, const LibrdfNode &amp;subject, const LibrdfNode &amp;predicate, const LibrdfNode &amp;resource)</argsstring>
        <name>Triple</name>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>subject</declname>
        </param>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>predicate</declname>
        </param>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="58" column="9" bodyfile="src/omexmeta/Triple.cpp" bodystart="42" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a1cb45dd3a5778f0e0e92e4a185da9400" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::Triple::getLocalUri</definition>
        <argsstring>() const</argsstring>
        <name>getLocalUri</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="63" column="27" bodyfile="src/omexmeta/Triple.cpp" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1afd918ecccfa23079d9cb70f2e1a3e9b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triple::setModelUri</definition>
        <argsstring>(const std::string &amp;model_uri)</argsstring>
        <name>setModelUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>model_uri</declname>
        </param>
        <briefdescription>
<para>set the model_uri_ attribute for this triple </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="68" column="14" bodyfile="src/omexmeta/Triple.cpp" bodystart="184" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a3f3868622349d3a3e14ed3e4b21d49a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triple::freeTriple</definition>
        <argsstring>()</argsstring>
        <name>freeTriple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="70" column="14" bodyfile="src/omexmeta/Triple.cpp" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1ac1110c3092b148b4da2264186b613a93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::about</definition>
        <argsstring>(std::string omex_name, const std::string &amp;model_name, std::string metaid)</argsstring>
        <name>about</name>
        <param>
          <type>std::string</type>
          <declname>omex_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>model_name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>metaid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="72" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="48" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a0c8371a282b8f2a59ebaa87abf7a8758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::about</definition>
        <argsstring>(std::string metaid)</argsstring>
        <name>about</name>
        <param>
          <type>std::string</type>
          <declname>metaid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="74" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="71" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a0a8d8795d7015d13d888ed77cbfb4220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::about</definition>
        <argsstring>(std::string metaid, eUriType uri_type)</argsstring>
        <name>about</name>
        <param>
          <type>std::string</type>
          <declname>metaid</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>uri_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="76" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="97" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a69df88d19e2f9077fccfa9543dadd15f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::Triple::getAbout</definition>
        <argsstring>() const</argsstring>
        <name>getAbout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="78" column="21" bodyfile="src/omexmeta/Triple.cpp" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a9e6e45b81bd0a9db98493cb5bf41edee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classredland_1_1LibrdfStatement" kindref="compound">LibrdfStatement</ref></type>
        <definition>LibrdfStatement omexmeta::Triple::getStatement</definition>
        <argsstring>() const</argsstring>
        <name>getStatement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="80" column="25" bodyfile="src/omexmeta/Triple.cpp" bodystart="166" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a57b4521321178af38415e76cd483207e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setPredicate</definition>
        <argsstring>(const std::string &amp;namespace_, const std::string &amp;term)</argsstring>
        <name>setPredicate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>namespace_</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="82" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="103" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a27637af321ba7d7eeb2596bac93feb54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::predicate</definition>
        <argsstring>(const std::string &amp;namespace_, const std::string &amp;term)</argsstring>
        <name>predicate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>namespace_</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
<para>alias for setPredicate </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="87" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a7358812badc8d0d5589a0165af4ad375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setResourceLiteral</definition>
        <argsstring>(const std::string &amp;literal)</argsstring>
        <name>setResourceLiteral</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>literal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="89" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1ae6836c6e9d06a310a120345aa95a4daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setResourceUri</definition>
        <argsstring>(const std::string &amp;identifiers_uri)</argsstring>
        <name>setResourceUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifiers_uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="91" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a90ffe9b74d354cc3fe3132a07546f6d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setResourceBlank</definition>
        <argsstring>(const std::string &amp;blank_id)</argsstring>
        <name>setResourceBlank</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>blank_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="93" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a34832780748d58b0fddea6f6f079217a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::Triple::isEmpty</definition>
        <argsstring>()</argsstring>
        <name>isEmpty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="95" column="14" bodyfile="src/omexmeta/Triple.cpp" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a2cb9ba4a57bd6f85c7a9b49b93245fea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::predicate</definition>
        <argsstring>(const std::string &amp;uri)</argsstring>
        <name>predicate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="99" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="117" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1ac379e5410a41c1946e91d581f023c7f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::Triple::getModelUri</definition>
        <argsstring>() const</argsstring>
        <name>getModelUri</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="103" column="27" bodyfile="src/omexmeta/Triple.cpp" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a44d31389b0056ab4f1d8689521a25032" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setResourceWithModelUri</definition>
        <argsstring>(const std::string &amp;metaid)</argsstring>
        <name>setResourceWithModelUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>metaid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="105" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a1659736747ab322116f5b75069efc398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::resourceWithModelUri</definition>
        <argsstring>(const std::string &amp;metaid)</argsstring>
        <name>resourceWithModelUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>metaid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="107" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="154" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a60b0bd14eb91bab42ea894ec50843eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::resourceLiteral</definition>
        <argsstring>(const std::string &amp;literal)</argsstring>
        <name>resourceLiteral</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>literal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="109" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a27f52f5d96e0fcbd17291bb88f39617f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::resourceUri</definition>
        <argsstring>(const std::string &amp;identifiers_uri)</argsstring>
        <name>resourceUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifiers_uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="111" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="141" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1ac19ea0eaa8bfe1a7c481da4312cdf1b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::resourceBlank</definition>
        <argsstring>(const std::string &amp;blank_id)</argsstring>
        <name>resourceBlank</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>blank_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="113" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="145" bodyend="147"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a8bc0e104ab8f1e18a4ff8b9cae503395" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::Triple</definition>
        <argsstring>(UriHandler &amp;uriHandler, librdf_statement *statement)</argsstring>
        <name>Triple</name>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <param>
          <type><ref refid="structraptor__statement" kindref="compound">librdf_statement</ref> *</type>
          <declname>statement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="116" column="9" bodyfile="src/omexmeta/Triple.cpp" bodystart="45" bodyend="46"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>redland::LibrdfStatement</label>
        <link refid="classredland_1_1LibrdfStatement"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>redland::RedlandType&lt; ObjType, FreeFuncType &gt;</label>
        <link refid="classredland_1_1RedlandType"/>
      </node>
      <node id="3">
        <label>RefCounted_librdf_statement</label>
        <link refid="classredland_1_1RefCountedRedlandType"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>omexmeta::Triple</label>
        <link refid="classomexmeta_1_1Triple"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>redland::LibrdfStatement</label>
        <link refid="classredland_1_1LibrdfStatement"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>redland::RedlandType&lt; ObjType, FreeFuncType &gt;</label>
        <link refid="classredland_1_1RedlandType"/>
      </node>
      <node id="3">
        <label>RefCounted_librdf_statement</label>
        <link refid="classredland_1_1RefCountedRedlandType"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>omexmeta::Triple</label>
        <link refid="classomexmeta_1_1Triple"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/omexmeta/include/omexmeta/Triple.h" line="33" column="5" bodyfile="src/omexmeta/include/omexmeta/Triple.h" bodystart="33" bodyend="119"/>
    <listofallmembers>
      <member refid="classomexmeta_1_1Triple_1ac1110c3092b148b4da2264186b613a93" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>about</name></member>
      <member refid="classomexmeta_1_1Triple_1a0c8371a282b8f2a59ebaa87abf7a8758" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>about</name></member>
      <member refid="classomexmeta_1_1Triple_1a0a8d8795d7015d13d888ed77cbfb4220" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>about</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a4935cf54fa2f367678319f1f2d837005" prot="public" virt="virtual"><scope>omexmeta::Triple</scope><name>checkForNull</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ac5acd1a9c67a8bd6f7b99098a7353424" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>equals</name></member>
      <member refid="classredland_1_1RedlandType_1afd3a894521540cf05dfa56a3a59b25b9" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>freeFunc_</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a5e09c936eada4386171e23bc599f334f" prot="public" virt="virtual"><scope>omexmeta::Triple</scope><name>freeObj</name></member>
      <member refid="classomexmeta_1_1Triple_1a3f3868622349d3a3e14ed3e4b21d49a9" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>freeTriple</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1aad3189482972131c1d253e7759fee33e" prot="public" virt="virtual"><scope>omexmeta::Triple</scope><name>get</name></member>
      <member refid="classomexmeta_1_1Triple_1a69df88d19e2f9077fccfa9543dadd15f" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getAbout</name></member>
      <member refid="classomexmeta_1_1Triple_1a1cb45dd3a5778f0e0e92e4a185da9400" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getLocalUri</name></member>
      <member refid="classomexmeta_1_1Triple_1ac379e5410a41c1946e91d581f023c7f5" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getModelUri</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ade668892ca9383eacbf5517df4e8f8d8" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getPredicateNode</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a9d4376221d84e22d15eeb6393ea4afe3" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getResourceNode</name></member>
      <member refid="classomexmeta_1_1Triple_1a9e6e45b81bd0a9db98493cb5bf41edee" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a2d7cc313572ac34e9822e97d6b23dd36" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getSubjectNode</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a6984bffbdd92f2eaaf23e86f65044fb9" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getUsage</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a688d681a2a77dcbd3223757912cc93b6" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getWithoutIncrement</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1ae8d1c23cc4bb8a9df585c87765d857bb" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>incrementUsage</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a84a6fae7f1879c2f033001a9927627b0" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>isComplete</name></member>
      <member refid="classomexmeta_1_1Triple_1a34832780748d58b0fddea6f6f079217a" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>isEmpty</name></member>
      <member refid="classredland_1_1RedlandType_1ac6594279280345bd8a03c1a7e950d3e0" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>isNull</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a4cbbbf99d094cea4569324a8c67789fb" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>LibrdfStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a65d896e0bf026ff027ad8488bddf6384" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>LibrdfStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ae7f7e27b7a502070195103268407243a" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>LibrdfStatement</name></member>
      <member refid="classredland_1_1RedlandType_1ac9d0c3d245e2394c137ee0ab266784ed" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>obj_</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ad3d6c126b90c0d93413a08353c496f8f" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>operator!=</name></member>
      <member refid="classredland_1_1RedlandType_1a4b0707a7465ffb5952bae3651f8c6d41" prot="public" virt="non-virtual" ambiguityscope="redland::RefCountedRedlandType::"><scope>omexmeta::Triple</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1Triple_1a0831a005f3b781b73f7af661c3a903f8" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1Triple_1a977b07d30a7d4895b6f6a4f75221df0c" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>operator=</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1aa0d305fe2357f0f5370a5027e165506a" prot="public" virt="non-virtual" ambiguityscope="redland::LibrdfStatement::"><scope>omexmeta::Triple</scope><name>operator=</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a1ac9b3d35fbbc1f17fb474d61071690e" prot="public" virt="non-virtual" ambiguityscope="redland::LibrdfStatement::"><scope>omexmeta::Triple</scope><name>operator=</name></member>
      <member refid="classredland_1_1RedlandType_1a5dd5fd7edeb2b6c17e8c92eb7ba01cac" prot="public" virt="non-virtual" ambiguityscope="redland::RedlandType::"><scope>omexmeta::Triple</scope><name>operator=</name></member>
      <member refid="classredland_1_1RedlandType_1a22e381182a5642883ad578db40368f13" prot="public" virt="non-virtual" ambiguityscope="redland::RedlandType::"><scope>omexmeta::Triple</scope><name>operator=</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ada81e9bfb312e25daf20d6dda10eeb2e" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>operator==</name></member>
      <member refid="classredland_1_1RedlandType_1a9fc5b1ce564f4c2497855cd965df1cfd" prot="public" virt="non-virtual" ambiguityscope="redland::RefCountedRedlandType::"><scope>omexmeta::Triple</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1Triple_1a27637af321ba7d7eeb2596bac93feb54" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>predicate</name></member>
      <member refid="classomexmeta_1_1Triple_1a2cb9ba4a57bd6f85c7a9b49b93245fea" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>predicate</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a3c3a57c6b73d9bea7e0a9cdb9a725006" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1ab7e0f16ed9acd6ba9c65b8e9259301e9" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a89f2c7b5d8133d7b22c54263ea2dcb3b" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a7884dd6bc66d9880090bb53f14683f1f" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RedlandType_1ab7e0f16ed9acd6ba9c65b8e9259301e9" prot="public" virt="non-virtual" ambiguityscope="redland::RedlandType::"><scope>omexmeta::Triple</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RedlandType_1a89f2c7b5d8133d7b22c54263ea2dcb3b" prot="public" virt="non-virtual" ambiguityscope="redland::RedlandType::"><scope>omexmeta::Triple</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RedlandType_1a7884dd6bc66d9880090bb53f14683f1f" prot="public" virt="non-virtual" ambiguityscope="redland::RedlandType::"><scope>omexmeta::Triple</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1ae0ca62ccfcffebe1f8d391fc80719fd7" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>RefCountedRedlandType</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1abb14a238dec2d35068c96d873ccef2da" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>RefCountedRedlandType</name></member>
      <member refid="classredland_1_1RedlandType_1aee7e39b6197cf77b19f873e3c2cea495" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>release</name></member>
      <member refid="classomexmeta_1_1Triple_1ac19ea0eaa8bfe1a7c481da4312cdf1b9" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>resourceBlank</name></member>
      <member refid="classomexmeta_1_1Triple_1a60b0bd14eb91bab42ea894ec50843eb3" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>resourceLiteral</name></member>
      <member refid="classomexmeta_1_1Triple_1a27f52f5d96e0fcbd17291bb88f39617f" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>resourceUri</name></member>
      <member refid="classomexmeta_1_1Triple_1a1659736747ab322116f5b75069efc398" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>resourceWithModelUri</name></member>
      <member refid="classredland_1_1RedlandType_1ac3255173f68c11e2ebeb0d991fec24e7" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setFreeFunc</name></member>
      <member refid="classomexmeta_1_1Triple_1afd918ecccfa23079d9cb70f2e1a3e9b0" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setModelUri</name></member>
      <member refid="classredland_1_1RedlandType_1a403c5018a01ee1dc94e4caa33bef91e7" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setObj</name></member>
      <member refid="classomexmeta_1_1Triple_1a57b4521321178af38415e76cd483207e" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setPredicate</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a155e25bff7660b03c4253715fe5e8194" prot="public" virt="non-virtual" ambiguityscope="redland::LibrdfStatement::"><scope>omexmeta::Triple</scope><name>setPredicate</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a74151d5fae756918cfd9b22d51fb8d71" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setResource</name></member>
      <member refid="classomexmeta_1_1Triple_1a90ffe9b74d354cc3fe3132a07546f6d1" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setResourceBlank</name></member>
      <member refid="classomexmeta_1_1Triple_1a7358812badc8d0d5589a0165af4ad375" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setResourceLiteral</name></member>
      <member refid="classomexmeta_1_1Triple_1ae6836c6e9d06a310a120345aa95a4daa" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setResourceUri</name></member>
      <member refid="classomexmeta_1_1Triple_1a44d31389b0056ab4f1d8689521a25032" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setResourceWithModelUri</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a9133d53a9b24ac0f0499f23cb6e53d40" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setSubject</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a8ce7a7bf352c4d91ae785a4468cf0960" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>ThisType</name></member>
      <member refid="classomexmeta_1_1Triple_1aa28089d2e08463961811f98d70b1df8a" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>Triple</name></member>
      <member refid="classomexmeta_1_1Triple_1ad160e8e90a25538cd5e3a8d46fae5cee" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>Triple</name></member>
      <member refid="classomexmeta_1_1Triple_1a79d8092e4fab78add6161890b2f3c624" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>Triple</name></member>
      <member refid="classomexmeta_1_1Triple_1ace642731214400b1c6d4ecff3b154598" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>Triple</name></member>
      <member refid="classomexmeta_1_1Triple_1a8bc0e104ab8f1e18a4ff8b9cae503395" prot="private" virt="non-virtual"><scope>omexmeta::Triple</scope><name>Triple</name></member>
      <member refid="classomexmeta_1_1Triple_1a36b093100ddf2b716b2d67336e1dffe4" prot="private" virt="non-virtual"><scope>omexmeta::Triple</scope><name>uriHandler_</name></member>
      <member refid="classredland_1_1RedlandType_1a028dab285bfd81fa4efca9206b0cd498" prot="public" virt="virtual"><scope>omexmeta::Triple</scope><name>~RedlandType</name></member>
      <member refid="classomexmeta_1_1Triple_1a9bbe27351665a72507570bd1da6b209c" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>~Triple</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
