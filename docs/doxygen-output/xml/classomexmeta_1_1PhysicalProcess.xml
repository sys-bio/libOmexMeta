<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classomexmeta_1_1PhysicalProcess" kind="class" language="C++" prot="public">
    <compoundname>omexmeta::PhysicalProcess</compoundname>
    <basecompoundref refid="classomexmeta_1_1PropertyBearer" prot="public" virt="non-virtual">omexmeta::PropertyBearer</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProcess_1a078e2a2f6554f2144ce69d817d9b23b9" prot="private" static="no" mutable="no">
        <type>Sources</type>
        <definition>Sources omexmeta::PhysicalProcess::sources_</definition>
        <argsstring></argsstring>
        <name>sources_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="159" column="17" bodyfile="src/omexmeta/include/omexmeta/PhysicalProcess.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProcess_1a2e32cf60245f3d3d55caba72165fe3fd" prot="private" static="no" mutable="no">
        <type>Sinks</type>
        <definition>Sinks omexmeta::PhysicalProcess::sinks_</definition>
        <argsstring></argsstring>
        <name>sinks_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="160" column="15" bodyfile="src/omexmeta/include/omexmeta/PhysicalProcess.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProcess_1a127844f0eb3350b2d2335ccd26438b7d" prot="private" static="no" mutable="no">
        <type>Mediators</type>
        <definition>Mediators omexmeta::PhysicalProcess::mediators_</definition>
        <argsstring></argsstring>
        <name>mediators_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="161" column="19" bodyfile="src/omexmeta/include/omexmeta/PhysicalProcess.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProcess_1a53e690a73469f891d5b6c3ab92fe31ff" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::PhysicalProcess::is_version_of_</definition>
        <argsstring></argsstring>
        <name>is_version_of_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="162" column="21" bodyfile="src/omexmeta/include/omexmeta/PhysicalProcess.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProcess_1a2646c7350a226acde1a81a35aa92b71b" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::PhysicalProcess::property_metaid_base_</definition>
        <argsstring></argsstring>
        <name>property_metaid_base_</name>
        <initializer>= &quot;ProcessProperty&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="163" column="21" bodyfile="src/omexmeta/include/omexmeta/PhysicalProcess.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1acf4c42d10d6dbdd3aa4285bed7bd823b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalProcess::PhysicalProcess</definition>
        <argsstring>()=delete</argsstring>
        <name>PhysicalProcess</name>
        <briefdescription>
<para>default constructor for <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>deliberately deleted. If you try using the builder interface (chaining setter methods) from a default instantiated <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> you will get an error, because there will be no model associated with <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref>. Instead, always instantiate a <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> from the <ref refid="classomexmeta_1_1Editor_1ae4a608ecbe64f05c1b64efbeeb1fdeb1" kindref="member">Editor::addPhysicalProcess()</ref> method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="32" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a20821628486c64885ca2523067a71eb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalProcess::~PhysicalProcess</definition>
        <argsstring>()=default</argsstring>
        <name>~PhysicalProcess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="34" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a7366b29ca47b442d8650b48e88ef4c32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalProcess::PhysicalProcess</definition>
        <argsstring>(LibrdfModel &amp;model, UriHandler &amp;uriHandler, const PhysicalProperty &amp;physicalProperty, Sources sources, Sinks sinks, Mediators mediators)</argsstring>
        <name>PhysicalProcess</name>
        <param>
          <type><ref refid="classredland_1_1LibrdfModel" kindref="compound">LibrdfModel</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> &amp;</type>
          <declname>physicalProperty</declname>
        </param>
        <param>
          <type>Sources</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>Sinks</type>
          <declname>sinks</declname>
        </param>
        <param>
          <type>Mediators</type>
          <declname>mediators</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> object. <ref refid="classSubclass" kindref="compound">Subclass</ref> of PhysicalPhenomenon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>a librdf_model pointer for current rdf graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>physicalProperty</parametername>
</parameternamelist>
<parameterdescription>
<para>the physical property for the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sources</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of Source objects representing the energetic sources for the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sinks</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of Sink objects representing the energetic sinks for the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mediator</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of Sink objects representing the energetic modulators for the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="46" column="9" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="9" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a8dfcffe80f264ad24e70de9d7b71c73b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::PhysicalProcess::free</definition>
        <argsstring>()</argsstring>
        <name>free</name>
        <briefdescription>
<para>free the node resources used by <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>When the <ref refid="classomexmeta_1_1PhysicalProcess_1ab6f6af00fac2401f9a88e186fd1d897a" kindref="member">toTriples()</ref> method is used, ownership of the nodes associated with <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> are transferred to the resulting <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object, which destroys them automatically at the right time. If user does not use the toTriples method, then resources used by <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> must be freed manually with this method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="58" column="14" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="71" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a84784ee46b8e8252d74d48029adb2723" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalProcess::PhysicalProcess</definition>
        <argsstring>(LibrdfModel &amp;model, UriHandler &amp;uriHandler)</argsstring>
        <name>PhysicalProcess</name>
        <param>
          <type><ref refid="classredland_1_1LibrdfModel" kindref="compound">LibrdfModel</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <briefdescription>
<para>constructor for the builder interface of <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> instantiation </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>the currently active <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_uri</parametername>
</parameternamelist>
<parameterdescription>
<para>the local uri in current use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="65" column="18" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="16" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1ab5f3100febc21173775a2090bb57a0fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Sources &amp;</type>
        <definition>const std::vector&lt; SourceParticipant &gt; &amp; omexmeta::PhysicalProcess::getSources</definition>
        <argsstring>() const</argsstring>
        <name>getSources</name>
        <briefdescription>
<para>getter for sources </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector of <ref refid="classomexmeta_1_1SourceParticipant" kindref="compound">SourceParticipant</ref> objects </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="71" column="24" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="19" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a069e7caa05f346f90f413f650f081535" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Sinks &amp;</type>
        <definition>const std::vector&lt; SinkParticipant &gt; &amp; omexmeta::PhysicalProcess::getSinks</definition>
        <argsstring>() const</argsstring>
        <name>getSinks</name>
        <briefdescription>
<para>getter for sinks </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector of <ref refid="classomexmeta_1_1SinkParticipant" kindref="compound">SinkParticipant</ref> objects </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="77" column="22" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="23" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a349b76ad1831d2510904510583f0d7f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Mediators &amp;</type>
        <definition>const std::vector&lt; MediatorParticipant &gt; &amp; omexmeta::PhysicalProcess::getMediators</definition>
        <argsstring>() const</argsstring>
        <name>getMediators</name>
        <briefdescription>
<para>getter for mediators </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector of <ref refid="classomexmeta_1_1MediatorParticipant" kindref="compound">MediatorParticipant</ref> objects </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="83" column="26" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="27" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1ab6f6af00fac2401f9a88e186fd1d897a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref></type>
        <definition>Triples omexmeta::PhysicalProcess::toTriples</definition>
        <argsstring>() override</argsstring>
        <name>toTriples</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1adccf527f59eaebc1baf88dfce3ae9664">toTriples</reimplements>
        <briefdescription>
<para>convert a <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> into a set of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object containing the set of <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> objects that represent this <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref></para>
</simplesect>
When used, the ownership of nodes in <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> are pass to the <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object, which automatically destroys them when appropriate. Otherwise the caller is responsible for freeing resources. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="93" column="17" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="96" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a4cae1a5cecfc2107f2667a2e5c0480cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::addSource</definition>
        <argsstring>(std::string physical_entity_reference, eUriType type, double multiplier=1.0)</argsstring>
        <name>addSource</name>
        <param>
          <type>std::string</type>
          <declname>physical_entity_reference</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>add a source to the list of Source object associated with a <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a reference to this <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> to enable chaining setter commands </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="99" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="31" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1aa55335a92b7558262f512f836fae8c4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::addSink</definition>
        <argsstring>(std::string physical_entity_reference, eUriType type, double multiplier=1.0)</argsstring>
        <name>addSink</name>
        <param>
          <type>std::string</type>
          <declname>physical_entity_reference</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>add a sink to the list of Source object associated with a <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a reference to this <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> to enable chaining setter commands </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="105" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="41" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a5a4ee2c911331eb5196e25168b41ee31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::addMediator</definition>
        <argsstring>(std::string physical_entity_reference, eUriType type)</argsstring>
        <name>addMediator</name>
        <param>
          <type>std::string</type>
          <declname>physical_entity_reference</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>add a mediator to the list of Source object associated with a <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a reference to this <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> to enable chaining setter commands </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="111" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="50" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a56459d9f0087a3f92b0aca5d148b65f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::PhysicalProcess::getNumSources</definition>
        <argsstring>()</argsstring>
        <name>getNumSources</name>
        <briefdescription>
<para>returns the number of sources assocaited with the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of Source objects associated with this <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="117" column="13" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1ac8b79af15d4d19042ee34abca25f679f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::PhysicalProcess::getNumSinks</definition>
        <argsstring>()</argsstring>
        <name>getNumSinks</name>
        <briefdescription>
<para>returns the number of sinks assocaited with the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of Sink objects associated with this <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="123" column="13" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a717a352ce3bb956201174002f904cd26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::PhysicalProcess::getNumMediators</definition>
        <argsstring>()</argsstring>
        <name>getNumMediators</name>
        <briefdescription>
<para>returns the number of mediators assocaited with the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of Mediator objects associated with this <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="129" column="13" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a65585bf5cd473d509f6f66c96757ff8d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::PhysicalProcess::operator==</definition>
        <argsstring>(const PhysicalProcess &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="131" column="14" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="83" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1af8298394b713807ec51c2b5f60afd00e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::PhysicalProcess::operator!=</definition>
        <argsstring>(const PhysicalProcess &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="133" column="14" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a6c4fa05087330d859f813a94543b9fbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::about</definition>
        <argsstring>(const std::string &amp;about, eUriType type) override</argsstring>
        <name>about</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1ab115d41cefd58183ebfe429af7be69dc">about</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>about</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>set the subject (rdf:about) portion of the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> composite annotation </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>about</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to be used as the LibrdfNode portion of the isVersionOf <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref>. <ref refid="classThis" kindref="compound">This</ref> should be an existing metaid on the model you are annotating. Will error when metaid does not exist.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<ref refid="classThis" kindref="compound">This</ref> method will set the LibrdfNode subject_ attribute of the <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> associated with the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="142" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a5d4e730b52c01ceea8868fb6e2372ef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::about</definition>
        <argsstring>(const std::string &amp;about) override</argsstring>
        <name>about</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1a374759ec870893444272ff0489be538f">about</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>about</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Since we can&apos;t have default arguments on a virutal member function we instead have an overload where the absent eUriType parameter is assumed to be the default value of NONE. Note, it may be prudent to figure out which of LOCAL or MODEL uri would be a better default. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="144" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a7b4408351b5226de0069459fc6de166b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::PhysicalProcess::getPropertyMetaidBase</definition>
        <argsstring>() const override</argsstring>
        <name>getPropertyMetaidBase</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1a8f819ed67e63c84aecff651cca4b945c">getPropertyMetaidBase</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="147" column="28" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a5a36f6efe4cfec19a68e4f16444ea049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::isVersionOf</definition>
        <argsstring>(const std::string &amp;is_version_of, eUriType type=NONE)</argsstring>
        <name>isVersionOf</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>is_version_of</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>type</declname>
          <defval>NONE</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="149" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a31fbd32cd2ccdd5d45417c963836bcf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::hasProperty</definition>
        <argsstring>(const PhysicalProperty &amp;property) override</argsstring>
        <name>hasProperty</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1ab70ef1dec50691f1731de28462ca3012">hasProperty</reimplements>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> &amp;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="151" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a35e816fb08c8a4e1cb16caea2fef8f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::hasProperty</definition>
        <argsstring>(const std::string &amp;property_about, eUriType about_uri_type, const std::string &amp;is_version_of, const std::string &amp;is_property_of, eUriType is_property_of_uri_type) override</argsstring>
        <name>hasProperty</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1a6b21c3a4e722fbc37540203d8bc72a5c">hasProperty</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>property_about</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>about_uri_type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>is_version_of</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>is_property_of</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>is_property_of_uri_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="153" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1ac351358203dce7f5c693620b989c0752" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::hasProperty</definition>
        <argsstring>(const std::string &amp;is_version_of) override</argsstring>
        <name>hasProperty</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1a042230eb589010b3acbb8d6b329c45cd">hasProperty</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>is_version_of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="155" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1ab66666911b82dd5966f16765290553cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::hasProperty</definition>
        <argsstring>(const std::string &amp;property_about, eUriType about_uri_type, const std::string &amp;is_version_of) override</argsstring>
        <name>hasProperty</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1aa2bc856917f03659ac84ac7b2e0a2c7d">hasProperty</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>property_about</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>about_uri_type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>is_version_of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="157" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="168" bodyend="171"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>omexmeta::PhysicalProcess</label>
        <link refid="classomexmeta_1_1PhysicalProcess"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>omexmeta::PropertyBearer</label>
        <link refid="classomexmeta_1_1PropertyBearer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>omexmeta::PhysicalProperty</label>
        <link refid="classomexmeta_1_1PhysicalProperty"/>
      </node>
      <node id="7">
        <label>omexmeta::UriHandler</label>
        <link refid="classomexmeta_1_1UriHandler"/>
      </node>
      <node id="1">
        <label>omexmeta::PhysicalProcess</label>
        <link refid="classomexmeta_1_1PhysicalProcess"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>RefCounted_librdf_model</label>
        <link refid="classredland_1_1RefCountedRedlandType"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>redland::RedlandType&lt; ObjType, FreeFuncType &gt;</label>
        <link refid="classredland_1_1RedlandType"/>
      </node>
      <node id="2">
        <label>omexmeta::PropertyBearer</label>
        <link refid="classomexmeta_1_1PropertyBearer"/>
        <childnode refid="3" relation="usage">
          <edgelabel>model_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>physical_property_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>uriHandler_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>redland::LibrdfModel</label>
        <link refid="classredland_1_1LibrdfModel"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/omexmeta/include/omexmeta/PhysicalProcess.h" line="22" column="5" bodyfile="src/omexmeta/include/omexmeta/PhysicalProcess.h" bodystart="22" bodyend="164"/>
    <listofallmembers>
      <member refid="classomexmeta_1_1PhysicalProcess_1a6c4fa05087330d859f813a94543b9fbd" prot="public" virt="virtual"><scope>omexmeta::PhysicalProcess</scope><name>about</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a5d4e730b52c01ceea8868fb6e2372ef5" prot="public" virt="virtual"><scope>omexmeta::PhysicalProcess</scope><name>about</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a930900eac7a51e075aa0a455c63e753c" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>about_uri_type_</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a9cd9e2ce5b8007edd315eb545e15f69f" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>about_value_</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a5a4ee2c911331eb5196e25168b41ee31" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>addMediator</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1aa55335a92b7558262f512f836fae8c4f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>addSink</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a4cae1a5cecfc2107f2667a2e5c0480cc" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>addSource</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a8dfcffe80f264ad24e70de9d7b71c73b" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>free</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a78328bba4ba48b3bfdcfebd8256d6add" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>generateMetaId</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a5171a92883795c1ba3981443ecd21864" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getAbout</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1ad53dffe87d395860708c4bcfc8a76478" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getAboutUriType</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a45b07ccfc203b51dfc08c45dbd37480d" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getLocalUri</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a349b76ad1831d2510904510583f0d7f2" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getMediators</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a7d73b7511a12c8050262de668e26f4a8" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getModel</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a6df2db1bb03c9b62da60263869f57ce6" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getModelUri</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1ad5385daa0deb6a484d16a190d46fa0e7" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getNewMetaidExclusionList</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a717a352ce3bb956201174002f904cd26" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getNumMediators</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1ac8b79af15d4d19042ee34abca25f679f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getNumSinks</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a56459d9f0087a3f92b0aca5d148b65f5" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getNumSources</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a38414e467fca285fa84e82184e4e26c3" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1ace448a5a3bf9c20e413cba3d36890442" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getPropertyAbout</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a7b4408351b5226de0069459fc6de166b" prot="public" virt="virtual"><scope>omexmeta::PhysicalProcess</scope><name>getPropertyMetaidBase</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a069e7caa05f346f90f413f650f081535" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getSinks</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1ab5f3100febc21173775a2090bb57a0fb" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getSources</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a1a7ffce435c889b4e3f26fcbb66b6cc3" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getType</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a31fbd32cd2ccdd5d45417c963836bcf5" prot="public" virt="virtual"><scope>omexmeta::PhysicalProcess</scope><name>hasProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a35e816fb08c8a4e1cb16caea2fef8f2b" prot="public" virt="virtual"><scope>omexmeta::PhysicalProcess</scope><name>hasProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1ac351358203dce7f5c693620b989c0752" prot="public" virt="virtual"><scope>omexmeta::PhysicalProcess</scope><name>hasProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1ab66666911b82dd5966f16765290553cc" prot="public" virt="virtual"><scope>omexmeta::PhysicalProcess</scope><name>hasProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a53e690a73469f891d5b6c3ab92fe31ff" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>is_version_of_</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a5a36f6efe4cfec19a68e4f16444ea049" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>isVersionOf</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a127844f0eb3350b2d2335ccd26438b7d" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>mediators_</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a230f7985fea69dd3cbeb4d589f73ff4e" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>model_</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a1ee416fecb12d19937f5bc9b6d43c7b1" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>new_metaid_exclusion_list_</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1af8298394b713807ec51c2b5f60afd00e" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a8e065b7ca6fc51c2eb4f4d63e1203fe2" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PropertyBearer::"><scope>omexmeta::PhysicalProcess</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a86f970e1522a3a180c9f9ada9df82b7e" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a961b7de161f14f4ac92b8dd216399b6a" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a65585bf5cd473d509f6f66c96757ff8d" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a354440c37a048f6d85e1b8613735a0b7" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PropertyBearer::"><scope>omexmeta::PhysicalProcess</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1abdaa4997f02b9ef36cda61037399eb86" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>physical_property_</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1acf4c42d10d6dbdd3aa4285bed7bd823b" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PhysicalProcess</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a7366b29ca47b442d8650b48e88ef4c32" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PhysicalProcess</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a84784ee46b8e8252d74d48029adb2723" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PhysicalProcess</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a2646c7350a226acde1a81a35aa92b71b" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>property_metaid_base_</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a8ae678b4a1cc528b20ff969b7d728bd6" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PropertyBearer</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1aba09b3a7c564ff208507dc0d533639ff" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PropertyBearer</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a130c3075575d8da0113ad6320a8f0794" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PropertyBearer</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a660b03e0a511fad961682b9d5105bff3" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PropertyBearer</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1ac6c56fcbb9cd396319c546cb472b7d01" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PropertyBearer</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a50f4abd4a7a5f699343fe824612b12fb" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>setAboutUriType</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a54b3df74898019158a849b9f0a9112ad" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>setPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1aa2de7a52a6737252ebf1d4d8820f8035" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>setType</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a2e32cf60245f3d3d55caba72165fe3fd" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>sinks_</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a078e2a2f6554f2144ce69d817d9b23b9" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>sources_</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1ab6f6af00fac2401f9a88e186fd1d897a" prot="public" virt="virtual"><scope>omexmeta::PhysicalProcess</scope><name>toTriples</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a98d1be3285eaeaa15c3c888a87190f55" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>type_</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a87848412017394e006ac24259f3f9e02" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>uriHandler_</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a20821628486c64885ca2523067a71eb8" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>~PhysicalProcess</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a9c492b5dde77979fedf04444c0316732" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>~PropertyBearer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
