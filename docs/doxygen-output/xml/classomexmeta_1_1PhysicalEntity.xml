<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classomexmeta_1_1PhysicalEntity" kind="class" language="C++" prot="public">
    <compoundname>omexmeta::PhysicalEntity</compoundname>
    <basecompoundref refid="classomexmeta_1_1PropertyBearer" prot="public" virt="non-virtual">omexmeta::PropertyBearer</basecompoundref>
    <includes refid="PhysicalEntity_8h" local="no">PhysicalEntity.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalEntity_1a68cdd5a93cbf3c225ec97b6852994999" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::PhysicalEntity::identity_resource_</definition>
        <argsstring></argsstring>
        <name>identity_resource_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="248" column="21" bodyfile="src/omexmeta/include/omexmeta/PhysicalEntity.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalEntity_1a3966efdc86f7f455e1abe8edc7225a25" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; omexmeta::PhysicalEntity::location_resources_</definition>
        <argsstring></argsstring>
        <name>location_resources_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="249" column="21" bodyfile="src/omexmeta/include/omexmeta/PhysicalEntity.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalEntity_1a18d640c67df3fd6c153c1298e2c9de9d" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; omexmeta::PhysicalEntity::part_resources_</definition>
        <argsstring></argsstring>
        <name>part_resources_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="250" column="21" bodyfile="src/omexmeta/include/omexmeta/PhysicalEntity.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalEntity_1a95bbbce8e02d4575f8bb00987494216e" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::PhysicalEntity::physical_entity_property_id_</definition>
        <argsstring></argsstring>
        <name>physical_entity_property_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="251" column="21" bodyfile="src/omexmeta/include/omexmeta/PhysicalEntity.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalEntity_1aef6d38bfa93a0c5eba971755f5241ba8" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::PhysicalEntity::property_metaid_base_</definition>
        <argsstring></argsstring>
        <name>property_metaid_base_</name>
        <initializer>= &quot;EntityProperty&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="255" column="21" bodyfile="src/omexmeta/include/omexmeta/PhysicalEntity.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a9d29348a080c64f91ff6ec184fd45ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalEntity::PhysicalEntity</definition>
        <argsstring>()=delete</argsstring>
        <name>PhysicalEntity</name>
        <briefdescription>
<para>default constructor for <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>deliberately deleted. If you try using the builder interface (chaining setter methods) from a default instantiated <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> you will get an error, because there will be no model assicated with <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref>. Instead, always instantiate a <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> from the <ref refid="classomexmeta_1_1Editor_1a0740831baafe244374ad7a324d51a87e" kindref="member">Editor::addPhysicalEntity()</ref> method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a0724e9286d1a9fb3247e925d55e5676d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalEntity::PhysicalEntity</definition>
        <argsstring>(LibrdfModel &amp;model, UriHandler &amp;uriHandler, PhysicalProperty physicalProperty, std::string is, std::vector&lt; std::string &gt; is_part_of)</argsstring>
        <name>PhysicalEntity</name>
        <param>
          <type><ref refid="classredland_1_1LibrdfModel" kindref="compound">LibrdfModel</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref></type>
          <declname>physicalProperty</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>is</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>is_part_of</declname>
        </param>
        <briefdescription>
<para>constructor for instantiating a <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> object </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>the model being used by the current rdf graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>about</parametername>
</parameternamelist>
<parameterdescription>
<para>The subject portion of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> representing the metaid for the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>physicalProperty</parametername>
</parameternamelist>
<parameterdescription>
<para>A term from the ontology of physical for biology of type <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>The &quot;what&quot; portion of a <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_part_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The &quot;where&quot; portion of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Users should not need to use this constructor directly as it is embedded in the builder interface. The<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is_part_of</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter is actually a std::vector of LibrdfNode objects. It can be as long as needed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="53" column="9" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="10" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1ab905eecead2704afb14285fa44899958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalEntity::~PhysicalEntity</definition>
        <argsstring>()=default</argsstring>
        <name>~PhysicalEntity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="56" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a6fd4acd7255a01322c4a53d3e84df0ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::PhysicalEntity::free</definition>
        <argsstring>()</argsstring>
        <name>free</name>
        <briefdescription>
<para>free resources uses by <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> objects are owned either by the caller or by a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object, depending on whether you have &quot;given&quot; the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> to a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object by calling &quot;str&quot; or &quot;toTriples&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="65" column="14" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="15" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a5c843c25a8343ec933cdf4465fc7723f" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>OMEXMETA_DEPRECATED</type>
        <definition>OMEXMETA_DEPRECATED omexmeta::PhysicalEntity::PhysicalEntity</definition>
        <argsstring>(LibrdfModel &amp;model)</argsstring>
        <name>PhysicalEntity</name>
        <param>
          <type><ref refid="classredland_1_1LibrdfModel" kindref="compound">LibrdfModel</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>constructor for <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>the librdf_model object in use. Passed down from <ref refid="classomexmeta_1_1Editor" kindref="compound">Editor</ref> class during instantiation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<ref refid="classThis" kindref="compound">This</ref> alternative constructor is used when users use the builder interface (which should actually be most of the time). The <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> is instantiated with only the model to allow for a better way of collecting necessary information from the user. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="77" column="38"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a05061b629f0bef3aeba8295390d47a34" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalEntity::PhysicalEntity</definition>
        <argsstring>(LibrdfModel &amp;model, UriHandler &amp;uriHandler)</argsstring>
        <name>PhysicalEntity</name>
        <param>
          <type><ref refid="classredland_1_1LibrdfModel" kindref="compound">LibrdfModel</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <briefdescription>
<para>constructor for <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>the librdf_model object in use. Passed down from <ref refid="classomexmeta_1_1Editor" kindref="compound">Editor</ref> class during instantiation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_uri</parametername>
</parameternamelist>
<parameterdescription>
<para>the current localName argument. Passed down from <ref refid="classomexmeta_1_1Editor" kindref="compound">Editor</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<ref refid="classThis" kindref="compound">This</ref> alternative constructor is used when users use the builder interface (which should actually be most of the time). The <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> is instantiated with only the model to allow for a better way of collecting necessary information from the user. The <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> also needs access to the model_uri, which we pass here. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="92" column="18" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="17" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a51f5df8b2e8a1d65e5aa0d10e53b77ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref></type>
        <definition>Triples omexmeta::PhysicalEntity::toTriples</definition>
        <argsstring>() override</argsstring>
        <name>toTriples</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1adccf527f59eaebc1baf88dfce3ae9664">toTriples</reimplements>
        <briefdescription>
<para>convert <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> to a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object, which can then be passed to a model via the <ref refid="classomexmeta_1_1Editor_1a0740831baafe244374ad7a324d51a87e" kindref="member">Editor::addPhysicalEntity</ref> method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> objects containing the <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> objects associated with this <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref></para>
</simplesect>
When using &quot;toTriples&quot; you are giving ownership of the nodes used by <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> to the returned <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object, which automatically cleans up after itself in its destructor. If you instantiate a <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> and do not call toTriples (which will not be often), then the caller is responsible for calling <ref refid="classomexmeta_1_1PhysicalEntity_1a6fd4acd7255a01322c4a53d3e84df0ba" kindref="member">PhysicalEntity::free</ref> when finished. </para>
        </detaileddescription>
        <inbodydescription>
<para>Patch around physical property triples generation. <ref refid="classThis" kindref="compound">This</ref> can be made more concise but for now we just use patch. When there is no physical property we do not add property related triples</para>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="106" column="18" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="62" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a82f43f8355a33284876b84278027cac5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::PhysicalEntity::getIdentityResource</definition>
        <argsstring>() const</argsstring>
        <name>getIdentityResource</name>
        <briefdescription>
<para>return the IdentityResource in use. I.e. the &quot;what&quot; portion of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the identity LibrdfNode </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="113" column="28" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a5bca97a9f5195260bd44f72b6d29d87a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; std::string &gt; &amp;</type>
        <definition>const std::vector&lt; std::string &gt; &amp; omexmeta::PhysicalEntity::getLocationResources</definition>
        <argsstring>() const</argsstring>
        <name>getLocationResources</name>
        <briefdescription>
<para>return a vector of resources representing the &quot;where&quot; part of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>vector of LibrdfNode objects representing anatomical location of physical entity </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="120" column="28" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a5d7168c527d2dbdacd612de37aa9a605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OMEXMETA_DEPRECATED <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::setPhysicalProperty</definition>
        <argsstring>(std::string subject_metaid, const std::string &amp;physicalProperty)</argsstring>
        <name>setPhysicalProperty</name>
        <param>
          <type>std::string</type>
          <declname>subject_metaid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>physicalProperty</declname>
        </param>
        <briefdescription>
<para>sets the physical property for a <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>physicalProperty</parametername>
</parameternamelist>
<parameterdescription>
<para>a string representing the OPB term used by the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to this Physical entity. Allows chaining together builder commands.</para>
</simplesect>
The OBP argument requires a string of the form &quot;obp:opbxxx&quot; where &quot;xxx&quot; is the id for the OPB term. An instance of <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> is instantiated with<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>physicalProperty</parametername>
</parameternamelist>
<parameterdescription>
<para>as its value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="130" column="44" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="26" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a9bca0cb13601b6f9617df9f264968f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OMEXMETA_DEPRECATED <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::setPhysicalProperty</definition>
        <argsstring>(PhysicalProperty physicalProperty)</argsstring>
        <name>setPhysicalProperty</name>
        <param>
          <type><ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref></type>
          <declname>physicalProperty</declname>
        </param>
        <briefdescription>
<para>sets the physical property for a <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> instance </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a reference to this Physical entity. Allows chaining together builder commands.</para>
</simplesect>
Prefer the alternative setPhysicalProperty instance, since you do not need to instantiate the <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> yourself.</para>
<para>For developers. Consider removing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="141" column="45" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a9029e221fb2e4125284eba3935993d8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::setIdentity</definition>
        <argsstring>(std::string resource)</argsstring>
        <name>setIdentity</name>
        <param>
          <type>std::string</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
<para>sets the identity portion of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> (the &quot;What&quot;). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resource</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource to be used for the identity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to this Physical entity. Allows chaining together builder commands.</para>
</simplesect>
The input string gets converted to a LibrdfNode automatically.</para>
<para>See LibrdfNode documentation for more details of valid input strings. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="152" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a6f51117462876bda1eb743244437104a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::identity</definition>
        <argsstring>(const std::string &amp;resource)</argsstring>
        <name>identity</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
<para>alias for setIdentity </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="157" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a82e77be3327c537b2426b571afaa5045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OMEXMETA_DEPRECATED <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::addLocation</definition>
        <argsstring>(const std::string &amp;where)</argsstring>
        <name>addLocation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>add a location to the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource representing a location. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to this Physical entity. Allows chaining together builder commands.</para>
</simplesect>
The input string gets converted to a LibrdfNode automatically. An arbitrary number of locations are allowed. The location is added to the back of a vector containing the Resources. Left most elements of this vector represent larger physiological locations which get smaller as the index of this vector increases via use of the &quot;isPartOf&quot; predicate. For example, a cytosolic TGFb molecule in a dermal fibroblast could have a locations vector first containing a reference to skin, then dermis, then fibroblast, then cytosol. <ref refid="classThis" kindref="compound">This</ref> ends up being cytosol&lt;isPartOf&gt;fibroblast&lt;isPartOf&gt;dermis&lt;isPartOf&gt;skin.</para>
<para>See LibrdfNode documentation for more details of valid input strings.</para>
<para>Deprecated in favour of <ref refid="classomexmeta_1_1PhysicalEntity_1aeba395f9474a7b6beb1b28a6095bb62d" kindref="member">PhysicalEntity::isPartOf</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="177" column="44" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a33559c90dbe3e3be1b71898ab9a5bfa4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::PhysicalEntity::getNumLocations</definition>
        <argsstring>() const</argsstring>
        <name>getNumLocations</name>
        <briefdescription>
<para>returns the number of locations used by <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of locations in a <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="183" column="14" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="138" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a5f54e5c2df0fd5c3b9121e1426b23af6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::PhysicalEntity::operator==</definition>
        <argsstring>(const PhysicalEntity &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="185" column="14" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="143" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1afee546a420f16e128ed1add9fec35b4f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::PhysicalEntity::operator!=</definition>
        <argsstring>(const PhysicalEntity &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="187" column="14" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="150" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1ad3b863794c49c8baf4477b88d5e1d8a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::propertyIsVersionOf</definition>
        <argsstring>(const std::string &amp;property)</argsstring>
        <name>propertyIsVersionOf</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
<para>Set the isVersionOf portion of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> composite annotation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>an opb term</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Should be of the form OPB:OPB_12345 or OPB/OPB_12345. <ref refid="classThis" kindref="compound">This</ref> function will set the LibrdfNode resource_ property on the <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> associated with this <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="195" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1ab61ca0ab001120b8cce16de4a1f5b96d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::isPropertyOf</definition>
        <argsstring>(const std::string &amp;is_property_of, eUriType type)</argsstring>
        <name>isPropertyOf</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>is_property_of</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="197" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1adae8f23418feee0833e8d63458175f19" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::about</definition>
        <argsstring>(const std::string &amp;about, eUriType type) override</argsstring>
        <name>about</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1ab115d41cefd58183ebfe429af7be69dc">about</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>about</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Set the about portion of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> composite annotation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>about</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to put in rdf:about</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<ref refid="classThis" kindref="compound">This</ref> function will set the LibrdfNode subject_ property on the <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> associated with this <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="205" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a6edbf68a1473211edc3dcc9c7a15d03c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::about</definition>
        <argsstring>(const std::string &amp;about) override</argsstring>
        <name>about</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1a374759ec870893444272ff0489be538f">about</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>about</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Since we can&apos;t have default arguments on a virutal member function we instead have an overload where the absent eUriType parameter is assumed to be the default value of NONE. Note, it may be prudent to figure out which of LOCAL or MODEL uri would be a better default. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="207" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a2498e9b0b11a00200e47332c4515b1f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::is</definition>
        <argsstring>(const std::string &amp;is)</argsstring>
        <name>is</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>Set the <computeroutput>is</computeroutput> portion of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> composite annotation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to be used for is. <ref refid="classThis" kindref="compound">This</ref> should be of the form OPB:OPB_00134</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<ref refid="classThis" kindref="compound">This</ref> function calls the <computeroutput><ref refid="classomexmeta_1_1PhysicalEntity_1a9029e221fb2e4125284eba3935993d8f" kindref="member">PhysicalEntity::setIdentity</ref></computeroutput> method and can be used as an alternative. For developers, consider which (or both? )sets of methods to keep, <computeroutput>is</computeroutput> or <computeroutput>setIdentity</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="216" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="175" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1aeba395f9474a7b6beb1b28a6095bb62d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::isPartOf</definition>
        <argsstring>(std::string isPartOf, eUriType type=NONE)</argsstring>
        <name>isPartOf</name>
        <param>
          <type>std::string</type>
          <declname>isPartOf</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>type</declname>
          <defval>NONE</defval>
        </param>
        <briefdescription>
<para>Set the location (<computeroutput>isPartOf</computeroutput>) portion of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> composite annotation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>isPartOf</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to be used for isPartOf predicate. <ref refid="classThis" kindref="compound">This</ref> should be of the form fma:FMA:12345 or fma/FMA:12345</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<ref refid="classThis" kindref="compound">This</ref> function calls the <computeroutput><ref refid="classomexmeta_1_1PhysicalEntity_1a82e77be3327c537b2426b571afaa5045" kindref="member">PhysicalEntity::addLocation</ref></computeroutput> method and can be used as an alternative. For developers, consider which (or both? )sets of methods to keep, <computeroutput>addLocation</computeroutput> or <computeroutput>isPartOf</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="225" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="179" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a200859dbbda1b17c244ced477d21f06f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::hasPart</definition>
        <argsstring>(const std::string &amp;part)</argsstring>
        <name>hasPart</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Add item to an &quot;hasPart&quot; triple on the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> composite annotation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to be used for hasPart predicate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
used in the case of annotating complexes which have no identity but several parts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="232" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a6aff4d003c2e39aad8bd00ab536ec00e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OMEXMETA_DEPRECATED <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::variableMetaId</definition>
        <argsstring>(const std::string &amp;metaid)</argsstring>
        <name>variableMetaId</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>metaid</declname>
        </param>
        <briefdescription>
<para>set the metaid of variable such as kinetic parameter </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="237" column="44" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1ac77ef003e4111cbdaf4c9c7f0c5fb680" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>OMEXMETA_DEPRECATED const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::PhysicalEntity::getPropertyMetaidBase</definition>
        <argsstring>() const override</argsstring>
        <name>getPropertyMetaidBase</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1a8f819ed67e63c84aecff651cca4b945c">getPropertyMetaidBase</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="239" column="48" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="190" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a9d8224786f634b20b32d5cbc2cccaa12" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::hasProperty</definition>
        <argsstring>(const PhysicalProperty &amp;property) override</argsstring>
        <name>hasProperty</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1ab70ef1dec50691f1731de28462ca3012">hasProperty</reimplements>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> &amp;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="241" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a5ca4656de18ff0bc740ebd9f2c7f8883" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::hasProperty</definition>
        <argsstring>(const std::string &amp;is_version_of) override</argsstring>
        <name>hasProperty</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1a042230eb589010b3acbb8d6b329c45cd">hasProperty</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>is_version_of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="243" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="201" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a151fae24b38b8c568fe2b0309bc8d113" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::hasProperty</definition>
        <argsstring>(const std::string &amp;property_about, eUriType about_uri_type, const std::string &amp;is_version_of) override</argsstring>
        <name>hasProperty</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1aa2bc856917f03659ac84ac7b2e0a2c7d">hasProperty</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>property_about</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>about_uri_type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>is_version_of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="245" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="205" bodyend="208"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> type of PhysicalPhenomenon </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>omexmeta::PropertyBearer</label>
        <link refid="classomexmeta_1_1PropertyBearer"/>
      </node>
      <node id="1">
        <label>omexmeta::PhysicalEntity</label>
        <link refid="classomexmeta_1_1PhysicalEntity"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>omexmeta::PhysicalProperty</label>
        <link refid="classomexmeta_1_1PhysicalProperty"/>
      </node>
      <node id="7">
        <label>omexmeta::UriHandler</label>
        <link refid="classomexmeta_1_1UriHandler"/>
      </node>
      <node id="4">
        <label>RefCounted_librdf_model</label>
        <link refid="classredland_1_1RefCountedRedlandType"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>redland::RedlandType&lt; ObjType, FreeFuncType &gt;</label>
        <link refid="classredland_1_1RedlandType"/>
      </node>
      <node id="2">
        <label>omexmeta::PropertyBearer</label>
        <link refid="classomexmeta_1_1PropertyBearer"/>
        <childnode refid="3" relation="usage">
          <edgelabel>model_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>physical_property_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>uriHandler_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>omexmeta::PhysicalEntity</label>
        <link refid="classomexmeta_1_1PhysicalEntity"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>redland::LibrdfModel</label>
        <link refid="classredland_1_1LibrdfModel"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/omexmeta/include/omexmeta/PhysicalEntity.h" line="26" column="5" bodyfile="src/omexmeta/include/omexmeta/PhysicalEntity.h" bodystart="26" bodyend="258"/>
    <listofallmembers>
      <member refid="classomexmeta_1_1PhysicalEntity_1adae8f23418feee0833e8d63458175f19" prot="public" virt="virtual"><scope>omexmeta::PhysicalEntity</scope><name>about</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a6edbf68a1473211edc3dcc9c7a15d03c" prot="public" virt="virtual"><scope>omexmeta::PhysicalEntity</scope><name>about</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a930900eac7a51e075aa0a455c63e753c" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>about_uri_type_</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a9cd9e2ce5b8007edd315eb545e15f69f" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>about_value_</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a82e77be3327c537b2426b571afaa5045" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>addLocation</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a6fd4acd7255a01322c4a53d3e84df0ba" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>free</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a78328bba4ba48b3bfdcfebd8256d6add" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>generateMetaId</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a5171a92883795c1ba3981443ecd21864" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getAbout</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1ad53dffe87d395860708c4bcfc8a76478" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getAboutUriType</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a82f43f8355a33284876b84278027cac5" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getIdentityResource</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a45b07ccfc203b51dfc08c45dbd37480d" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getLocalUri</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a5bca97a9f5195260bd44f72b6d29d87a" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getLocationResources</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a7d73b7511a12c8050262de668e26f4a8" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getModel</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a6df2db1bb03c9b62da60263869f57ce6" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getModelUri</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1ad5385daa0deb6a484d16a190d46fa0e7" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getNewMetaidExclusionList</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a33559c90dbe3e3be1b71898ab9a5bfa4" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getNumLocations</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a38414e467fca285fa84e82184e4e26c3" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1ace448a5a3bf9c20e413cba3d36890442" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getPropertyAbout</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1ac77ef003e4111cbdaf4c9c7f0c5fb680" prot="public" virt="virtual"><scope>omexmeta::PhysicalEntity</scope><name>getPropertyMetaidBase</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a1a7ffce435c889b4e3f26fcbb66b6cc3" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getType</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a200859dbbda1b17c244ced477d21f06f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>hasPart</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a9d8224786f634b20b32d5cbc2cccaa12" prot="public" virt="virtual"><scope>omexmeta::PhysicalEntity</scope><name>hasProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a5ca4656de18ff0bc740ebd9f2c7f8883" prot="public" virt="virtual"><scope>omexmeta::PhysicalEntity</scope><name>hasProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a151fae24b38b8c568fe2b0309bc8d113" prot="public" virt="virtual"><scope>omexmeta::PhysicalEntity</scope><name>hasProperty</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a6b21c3a4e722fbc37540203d8bc72a5c" prot="public" virt="virtual" ambiguityscope="omexmeta::PropertyBearer::"><scope>omexmeta::PhysicalEntity</scope><name>hasProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a6f51117462876bda1eb743244437104a" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>identity</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a68cdd5a93cbf3c225ec97b6852994999" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>identity_resource_</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a2498e9b0b11a00200e47332c4515b1f1" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>is</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1aeba395f9474a7b6beb1b28a6095bb62d" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>isPartOf</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1ab61ca0ab001120b8cce16de4a1f5b96d" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>isPropertyOf</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a3966efdc86f7f455e1abe8edc7225a25" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>location_resources_</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a230f7985fea69dd3cbeb4d589f73ff4e" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>model_</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a1ee416fecb12d19937f5bc9b6d43c7b1" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>new_metaid_exclusion_list_</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1afee546a420f16e128ed1add9fec35b4f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a8e065b7ca6fc51c2eb4f4d63e1203fe2" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PropertyBearer::"><scope>omexmeta::PhysicalEntity</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a86f970e1522a3a180c9f9ada9df82b7e" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a961b7de161f14f4ac92b8dd216399b6a" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a5f54e5c2df0fd5c3b9121e1426b23af6" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a354440c37a048f6d85e1b8613735a0b7" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PropertyBearer::"><scope>omexmeta::PhysicalEntity</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a18d640c67df3fd6c153c1298e2c9de9d" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>part_resources_</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a95bbbce8e02d4575f8bb00987494216e" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>physical_entity_property_id_</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1abdaa4997f02b9ef36cda61037399eb86" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>physical_property_</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a9d29348a080c64f91ff6ec184fd45ece" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PhysicalEntity</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a0724e9286d1a9fb3247e925d55e5676d" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PhysicalEntity</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a5c843c25a8343ec933cdf4465fc7723f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PhysicalEntity</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a05061b629f0bef3aeba8295390d47a34" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PhysicalEntity</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1aef6d38bfa93a0c5eba971755f5241ba8" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>property_metaid_base_</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a8ae678b4a1cc528b20ff969b7d728bd6" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PropertyBearer</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1aba09b3a7c564ff208507dc0d533639ff" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PropertyBearer</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a130c3075575d8da0113ad6320a8f0794" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PropertyBearer</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a660b03e0a511fad961682b9d5105bff3" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PropertyBearer</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1ac6c56fcbb9cd396319c546cb472b7d01" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PropertyBearer</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1ad3b863794c49c8baf4477b88d5e1d8a2" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>propertyIsVersionOf</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a50f4abd4a7a5f699343fe824612b12fb" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>setAboutUriType</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a9029e221fb2e4125284eba3935993d8f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>setIdentity</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a5d7168c527d2dbdacd612de37aa9a605" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>setPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a9bca0cb13601b6f9617df9f264968f1f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>setPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a54b3df74898019158a849b9f0a9112ad" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PropertyBearer::"><scope>omexmeta::PhysicalEntity</scope><name>setPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1aa2de7a52a6737252ebf1d4d8820f8035" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>setType</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a51f5df8b2e8a1d65e5aa0d10e53b77ba" prot="public" virt="virtual"><scope>omexmeta::PhysicalEntity</scope><name>toTriples</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a98d1be3285eaeaa15c3c888a87190f55" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>type_</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a87848412017394e006ac24259f3f9e02" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>uriHandler_</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a6aff4d003c2e39aad8bd00ab536ec00e" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>variableMetaId</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1ab905eecead2704afb14285fa44899958" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>~PhysicalEntity</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a9c492b5dde77979fedf04444c0316732" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>~PropertyBearer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
