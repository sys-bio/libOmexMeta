<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classomexmeta_1_1EnergyDiff" kind="class" language="C++" prot="public">
    <compoundname>omexmeta::EnergyDiff</compoundname>
    <basecompoundref refid="classomexmeta_1_1PropertyBearer" prot="public" virt="non-virtual">omexmeta::PropertyBearer</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1EnergyDiff_1a46a321ff0c7f07b5bc59e2bbc7422f8c" prot="private" static="no" mutable="no">
        <type>Sources</type>
        <definition>Sources omexmeta::EnergyDiff::sources_</definition>
        <argsstring></argsstring>
        <name>sources_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="194" column="17" bodyfile="src/omexmeta/include/omexmeta/EnergyDiff.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1EnergyDiff_1a34996f1c9fd2e0685c009de63e44cd31" prot="private" static="no" mutable="no">
        <type>Sinks</type>
        <definition>Sinks omexmeta::EnergyDiff::sinks_</definition>
        <argsstring></argsstring>
        <name>sinks_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="195" column="15" bodyfile="src/omexmeta/include/omexmeta/EnergyDiff.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1EnergyDiff_1a9a68625316c4e2fa7ab5013cbe585ba0" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::EnergyDiff::property_metaid_base_</definition>
        <argsstring></argsstring>
        <name>property_metaid_base_</name>
        <initializer>= &quot;EnergyDiffProperty&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="196" column="21" bodyfile="src/omexmeta/include/omexmeta/EnergyDiff.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1ae40b225f1950a46e51f98a02f56a8f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::EnergyDiff::EnergyDiff</definition>
        <argsstring>()=delete</argsstring>
        <name>EnergyDiff</name>
        <briefdescription>
<para>default constructor for <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>deliberately deleted. If you try using the builder interface (chaining setter methods) from a default instantiated <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> you will get an error, because there will be no model assicated with <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref>. Instead, always instantiate a <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> from the <ref refid="classomexmeta_1_1Editor_1a0e7eb192448ba81b1ca7f91b15785030" kindref="member">Editor::addEnergyDiff()</ref> method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="36" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a702c8bcf724ef81aa9af04a1389507e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::EnergyDiff::~EnergyDiff</definition>
        <argsstring>()=default</argsstring>
        <name>~EnergyDiff</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a981fdfc07cf7b3fbe7e2c72d594bbb12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::EnergyDiff::EnergyDiff</definition>
        <argsstring>(LibrdfModel &amp;model, UriHandler &amp;uriHandler, PhysicalProperty physicalProperty, Sources sources, Sinks sinks)</argsstring>
        <name>EnergyDiff</name>
        <param>
          <type><ref refid="classredland_1_1LibrdfModel" kindref="compound">LibrdfModel</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref></type>
          <declname>physicalProperty</declname>
        </param>
        <param>
          <type>Sources</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>Sinks</type>
          <declname>sinks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="40" column="9" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="10" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a04547f43809e57847265b911f6868018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::EnergyDiff::free</definition>
        <argsstring>()</argsstring>
        <name>free</name>
        <briefdescription>
<para>Free nodes associated with <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> is owned by the caller if the <ref refid="classomexmeta_1_1EnergyDiff_1a34bef11e0fca4435e0f1a9ba93d7ddf4" kindref="member">EnergyDiff::toTriples</ref> method is NOT used. When <ref refid="classomexmeta_1_1EnergyDiff_1a34bef11e0fca4435e0f1a9ba93d7ddf4" kindref="member">toTriples()</ref> is used, the nodes that create the <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> are &quot;given&quot; to the <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object, which automatically destroys them at the right time.</para>
<para>Most of the time, users will not have to remember to free the <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> themselves as the toTriples method is always used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="55" column="14" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="101" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1afc97656796d5412c430bc6cec644bed6" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::EnergyDiff::EnergyDiff</definition>
        <argsstring>(LibrdfModel &amp;model, UriHandler &amp;uriHandler)</argsstring>
        <name>EnergyDiff</name>
        <param>
          <type><ref refid="classredland_1_1LibrdfModel" kindref="compound">LibrdfModel</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <briefdescription>
<para>constructor for instantiating a <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> type composite annotation </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model.</parametername>
</parameternamelist>
<parameterdescription>
<para>A librdf_model pass down by <ref refid="classomexmeta_1_1Editor" kindref="compound">Editor</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_uri.</parametername>
</parameternamelist>
<parameterdescription>
<para>String passed down by <ref refid="classomexmeta_1_1Editor" kindref="compound">Editor</ref>. The local uri to use for metaids</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Users do not need to instantiate <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> manually, since it is done by <ref refid="classomexmeta_1_1Editor" kindref="compound">Editor</ref>. <ref refid="classThis" kindref="compound">This</ref> constructor instantiates an empty <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> object which is filled by </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="67" column="18" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="90" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a251676c05ab006aa282520e0e9464c4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::EnergyDiff::createMetaId</definition>
        <argsstring>()</argsstring>
        <name>createMetaId</name>
        <briefdescription>
<para>create a metaid for the energy differential annotation </para>
        </briefdescription>
        <detaileddescription>
<para>a new metaid for <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="73" column="23" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a233d2ccf116a4ddcd87f853faabe0824" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Sources &amp;</type>
        <definition>const std::vector&lt; SourceParticipant &gt; &amp; omexmeta::EnergyDiff::getSources</definition>
        <argsstring>() const</argsstring>
        <name>getSources</name>
        <briefdescription>
<para>return vector of Source objects assocated with <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector of SourceParticipants </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="79" column="24" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="18" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1ab8530b24901f539967c5b51d57b2ed98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Sinks &amp;</type>
        <definition>const std::vector&lt; SinkParticipant &gt; &amp; omexmeta::EnergyDiff::getSinks</definition>
        <argsstring>() const</argsstring>
        <name>getSinks</name>
        <briefdescription>
<para>return vector of Sink objects assocated with <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector of SinkParticipants </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="85" column="22" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a34bef11e0fca4435e0f1a9ba93d7ddf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref></type>
        <definition>Triples omexmeta::EnergyDiff::toTriples</definition>
        <argsstring>() override</argsstring>
        <name>toTriples</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1adccf527f59eaebc1baf88dfce3ae9664">toTriples</reimplements>
        <briefdescription>
<para>converts the PhyicalForce object into a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object containing the individual <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> objects of a <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref>.</para>
</simplesect>
When this method is called ownership of all <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> nodes gets transferred from the caller to the returned <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="94" column="18" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="30" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1af24cd391d9b15de82f1fa435275ca533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OMEXMETA_DEPRECATED <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> &amp;</type>
        <definition>EnergyDiff &amp; omexmeta::EnergyDiff::setPhysicalProperty</definition>
        <argsstring>(PhysicalProperty physicalProperty)</argsstring>
        <name>setPhysicalProperty</name>
        <param>
          <type><ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref></type>
          <declname>physicalProperty</declname>
        </param>
        <briefdescription>
<para>sets the physical property of the <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> @parameter physicalProperty An instance of <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> representing the physical property term for the <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a reference to this <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> to enable the builder interface.</para>
</simplesect>
Prefer the other setPhysicalProperty method since it only requires a string input and instantiates the <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> for you.</para>
<para>For developers. Consider removing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="107" column="41" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a52481a08e42648acb227defd28e4961e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OMEXMETA_DEPRECATED <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> &amp;</type>
        <definition>EnergyDiff &amp; omexmeta::EnergyDiff::setPhysicalProperty</definition>
        <argsstring>(std::string subject_metaid, const std::string &amp;physical_property)</argsstring>
        <name>setPhysicalProperty</name>
        <param>
          <type>std::string</type>
          <declname>subject_metaid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>physical_property</declname>
        </param>
        <briefdescription>
<para>sets the physical property of the <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>subject_metaid.</parametername>
</parameternamelist>
<parameterdescription>
<para>The subject portion of the two triples produced by <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref>. Metaid of a model element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>string representing the OPB term to use as the physical property. Like &quot;OPB:OPB_1234&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to this <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> to enable the builder interface. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="115" column="40" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="67" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a89b71ee99e45544f84ce7995db575f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> &amp;</type>
        <definition>EnergyDiff &amp; omexmeta::EnergyDiff::addSource</definition>
        <argsstring>(const std::string &amp;physical_entity_reference, eUriType type)</argsstring>
        <name>addSource</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>physical_entity_reference</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>add a <ref refid="classomexmeta_1_1SourceParticipant" kindref="compound">SourceParticipant</ref> to the <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metaid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID for the <ref refid="classomexmeta_1_1SourceParticipant" kindref="compound">SourceParticipant</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>The multiplier argument for <ref refid="classomexmeta_1_1SourceParticipant" kindref="compound">SourceParticipant</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>physical_entity_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>The physicalEntityReference argument for the <ref refid="classomexmeta_1_1SourceParticipant" kindref="compound">SourceParticipant</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to this <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> to enable the builder interface.</para>
</simplesect>
See <ref refid="classomexmeta_1_1SourceParticipant" kindref="compound">SourceParticipant</ref> documentation for more details on arguments. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="127" column="20" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="77" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a4525a9f6eb11712f775f5dc62e64a9e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> &amp;</type>
        <definition>EnergyDiff &amp; omexmeta::EnergyDiff::addSink</definition>
        <argsstring>(const std::string &amp;physical_entity_reference, eUriType type)</argsstring>
        <name>addSink</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>physical_entity_reference</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>add a <ref refid="classomexmeta_1_1SinkParticipant" kindref="compound">SinkParticipant</ref> to the <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sink_metaid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID for the <ref refid="classomexmeta_1_1SinkParticipant" kindref="compound">SinkParticipant</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>The multiplier argument for <ref refid="classomexmeta_1_1SinkParticipant" kindref="compound">SinkParticipant</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>physical_entity_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>The physicalEntityReference argument for the <ref refid="classomexmeta_1_1SinkParticipant" kindref="compound">SinkParticipant</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to this <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> to enable the builder interface.</para>
</simplesect>
See <ref refid="classomexmeta_1_1SinkParticipant" kindref="compound">SinkParticipant</ref> documentation for more details on arguments. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="139" column="20" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="84" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1ae73876722556ca27d21e43b0c7823618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::EnergyDiff::getNumSources</definition>
        <argsstring>()</argsstring>
        <name>getNumSources</name>
        <briefdescription>
<para>returns the number of sources associated with the <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the integer number of sources </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="146" column="13" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1afbc21847dde7dfe371f01c009e522f95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::EnergyDiff::getNumSinks</definition>
        <argsstring>()</argsstring>
        <name>getNumSinks</name>
        <briefdescription>
<para>returns the number of sinks associated with the <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the integer number of sinks </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="153" column="13" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a55114ed454aea2b44ba530e880fae3bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::EnergyDiff::operator==</definition>
        <argsstring>(const EnergyDiff &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="155" column="14" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="111" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a0d5f37b499b9204fe425af2ceb26832d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::EnergyDiff::operator!=</definition>
        <argsstring>(const EnergyDiff &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="157" column="14" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a01637dda292ce8ca2bab22f20c874c5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> &amp;</type>
        <definition>EnergyDiff &amp; omexmeta::EnergyDiff::isVersionOf</definition>
        <argsstring>(const std::string &amp;property)</argsstring>
        <name>isVersionOf</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
<para>set the isVersionOf portion of the <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> composite annotation </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is_version_of</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to be used as the LibrdfNode portion of the isVersionOf <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref>. <ref refid="classThis" kindref="compound">This</ref> should be of the form OPB:OPB_12345 or OPB/OPB_12345.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<ref refid="classThis" kindref="compound">This</ref> method will set the LibrdfNode resource_ attribute of the <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> associated with the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="166" column="20" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a16d55b4c4094dad5ac7b770f3913ca15" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> &amp;</type>
        <definition>EnergyDiff &amp; omexmeta::EnergyDiff::about</definition>
        <argsstring>(const std::string &amp;about, eUriType type) override</argsstring>
        <name>about</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1ab115d41cefd58183ebfe429af7be69dc">about</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>about</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>set the subject (rdf:about) portion of the <ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> composite annotation </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>about</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to be used as the LibrdfNode portion of the isVersionOf <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref>. <ref refid="classThis" kindref="compound">This</ref> should be an existing metaid on the model you are annotating. Will error when metaid does not exist.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<ref refid="classThis" kindref="compound">This</ref> method will set the LibrdfNode subject_ attribute of the <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> associated with the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="175" column="20" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a6da098157ab9cc7ae07cc063be91b50b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> &amp;</type>
        <definition>EnergyDiff &amp; omexmeta::EnergyDiff::about</definition>
        <argsstring>(const std::string &amp;about) override</argsstring>
        <name>about</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1a374759ec870893444272ff0489be538f">about</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>about</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Since we can&apos;t have default arguments on a virutal member function we instead have an overload where the absent eUriType parameter is assumed to be the default value of NONE. Note, it may be prudent to figure out which of LOCAL or MODEL uri would be a better default. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="177" column="20" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a93f81d7b9419c1eb3a42ef8286686911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> &amp;</type>
        <definition>EnergyDiff &amp; omexmeta::EnergyDiff::isPropertyOf</definition>
        <argsstring>(const std::string &amp;is_property_of, eUriType type)</argsstring>
        <name>isPropertyOf</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>is_property_of</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="179" column="20" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a059f531d872cf7c54ee264c7bef01681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> &amp;</type>
        <definition>EnergyDiff &amp; omexmeta::EnergyDiff::propertyIsVersionOf</definition>
        <argsstring>(const std::string &amp;is_version_of)</argsstring>
        <name>propertyIsVersionOf</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>is_version_of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="181" column="20" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1aee6e2c39d0d8db5cf26b49cd34514716" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::EnergyDiff::getPropertyMetaidBase</definition>
        <argsstring>() const override</argsstring>
        <name>getPropertyMetaidBase</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1a8f819ed67e63c84aecff651cca4b945c">getPropertyMetaidBase</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="183" column="28" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a55a0a62c0bb16b47ea1ef5dbc0b0a817" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> &amp;</type>
        <definition>EnergyDiff &amp; omexmeta::EnergyDiff::hasProperty</definition>
        <argsstring>(const PhysicalProperty &amp;property) override</argsstring>
        <name>hasProperty</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1ab70ef1dec50691f1731de28462ca3012">hasProperty</reimplements>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> &amp;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="186" column="20" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1af92aa22ac718d0707c9245c9483a8bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> &amp;</type>
        <definition>EnergyDiff &amp; omexmeta::EnergyDiff::hasProperty</definition>
        <argsstring>(const std::string &amp;property_about, eUriType about_uri_type, const std::string &amp;is_version_of, const std::string &amp;is_property_of, eUriType is_property_of_uri_type) override</argsstring>
        <name>hasProperty</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1a6b21c3a4e722fbc37540203d8bc72a5c">hasProperty</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>property_about</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>about_uri_type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>is_version_of</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>is_property_of</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>is_property_of_uri_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="188" column="20" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1a950d70967fe0976d3583c0eb318cd9aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> &amp;</type>
        <definition>EnergyDiff &amp; omexmeta::EnergyDiff::hasProperty</definition>
        <argsstring>(const std::string &amp;is_version_of) override</argsstring>
        <name>hasProperty</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1a042230eb589010b3acbb8d6b329c45cd">hasProperty</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>is_version_of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="190" column="20" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1EnergyDiff_1ae5077644798fd94176a8ec67be9e808f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1EnergyDiff" kindref="compound">EnergyDiff</ref> &amp;</type>
        <definition>EnergyDiff &amp; omexmeta::EnergyDiff::hasProperty</definition>
        <argsstring>(const std::string &amp;property_about, eUriType about_uri_type, const std::string &amp;is_version_of) override</argsstring>
        <name>hasProperty</name>
        <reimplements refid="classomexmeta_1_1PropertyBearer_1aa2bc856917f03659ac84ac7b2e0a2c7d">hasProperty</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>property_about</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>about_uri_type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>is_version_of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="192" column="20" bodyfile="src/omexmeta/EnergyDiff.cpp" bodystart="152" bodyend="155"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>omexmeta::EnergyDiff</label>
        <link refid="classomexmeta_1_1EnergyDiff"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>omexmeta::PropertyBearer</label>
        <link refid="classomexmeta_1_1PropertyBearer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>omexmeta::PhysicalProperty</label>
        <link refid="classomexmeta_1_1PhysicalProperty"/>
      </node>
      <node id="7">
        <label>omexmeta::UriHandler</label>
        <link refid="classomexmeta_1_1UriHandler"/>
      </node>
      <node id="4">
        <label>RefCounted_librdf_model</label>
        <link refid="classredland_1_1RefCountedRedlandType"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>redland::RedlandType&lt; ObjType, FreeFuncType &gt;</label>
        <link refid="classredland_1_1RedlandType"/>
      </node>
      <node id="1">
        <label>omexmeta::EnergyDiff</label>
        <link refid="classomexmeta_1_1EnergyDiff"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>omexmeta::PropertyBearer</label>
        <link refid="classomexmeta_1_1PropertyBearer"/>
        <childnode refid="3" relation="usage">
          <edgelabel>model_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>physical_property_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>uriHandler_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>redland::LibrdfModel</label>
        <link refid="classredland_1_1LibrdfModel"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/omexmeta/include/omexmeta/EnergyDiff.h" line="24" column="5" bodyfile="src/omexmeta/include/omexmeta/EnergyDiff.h" bodystart="24" bodyend="198"/>
    <listofallmembers>
      <member refid="classomexmeta_1_1EnergyDiff_1a16d55b4c4094dad5ac7b770f3913ca15" prot="public" virt="virtual"><scope>omexmeta::EnergyDiff</scope><name>about</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a6da098157ab9cc7ae07cc063be91b50b" prot="public" virt="virtual"><scope>omexmeta::EnergyDiff</scope><name>about</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a930900eac7a51e075aa0a455c63e753c" prot="protected" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>about_uri_type_</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a9cd9e2ce5b8007edd315eb545e15f69f" prot="protected" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>about_value_</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a4525a9f6eb11712f775f5dc62e64a9e7" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>addSink</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a89b71ee99e45544f84ce7995db575f0a" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>addSource</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a251676c05ab006aa282520e0e9464c4e" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>createMetaId</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1ae40b225f1950a46e51f98a02f56a8f78" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>EnergyDiff</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a981fdfc07cf7b3fbe7e2c72d594bbb12" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>EnergyDiff</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1afc97656796d5412c430bc6cec644bed6" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>EnergyDiff</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a04547f43809e57847265b911f6868018" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>free</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a78328bba4ba48b3bfdcfebd8256d6add" prot="protected" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>generateMetaId</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a5171a92883795c1ba3981443ecd21864" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>getAbout</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1ad53dffe87d395860708c4bcfc8a76478" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>getAboutUriType</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a45b07ccfc203b51dfc08c45dbd37480d" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>getLocalUri</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a7d73b7511a12c8050262de668e26f4a8" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>getModel</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a6df2db1bb03c9b62da60263869f57ce6" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>getModelUri</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1ad5385daa0deb6a484d16a190d46fa0e7" prot="protected" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>getNewMetaidExclusionList</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1afbc21847dde7dfe371f01c009e522f95" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>getNumSinks</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1ae73876722556ca27d21e43b0c7823618" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>getNumSources</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a38414e467fca285fa84e82184e4e26c3" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>getPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1ace448a5a3bf9c20e413cba3d36890442" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>getPropertyAbout</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1aee6e2c39d0d8db5cf26b49cd34514716" prot="public" virt="virtual"><scope>omexmeta::EnergyDiff</scope><name>getPropertyMetaidBase</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1ab8530b24901f539967c5b51d57b2ed98" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>getSinks</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a233d2ccf116a4ddcd87f853faabe0824" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>getSources</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a1a7ffce435c889b4e3f26fcbb66b6cc3" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>getType</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a55a0a62c0bb16b47ea1ef5dbc0b0a817" prot="public" virt="virtual"><scope>omexmeta::EnergyDiff</scope><name>hasProperty</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1af92aa22ac718d0707c9245c9483a8bcc" prot="public" virt="virtual"><scope>omexmeta::EnergyDiff</scope><name>hasProperty</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a950d70967fe0976d3583c0eb318cd9aa" prot="public" virt="virtual"><scope>omexmeta::EnergyDiff</scope><name>hasProperty</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1ae5077644798fd94176a8ec67be9e808f" prot="public" virt="virtual"><scope>omexmeta::EnergyDiff</scope><name>hasProperty</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a93f81d7b9419c1eb3a42ef8286686911" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>isPropertyOf</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a01637dda292ce8ca2bab22f20c874c5d" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>isVersionOf</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a230f7985fea69dd3cbeb4d589f73ff4e" prot="protected" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>model_</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a1ee416fecb12d19937f5bc9b6d43c7b1" prot="protected" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>new_metaid_exclusion_list_</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a0d5f37b499b9204fe425af2ceb26832d" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a8e065b7ca6fc51c2eb4f4d63e1203fe2" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PropertyBearer::"><scope>omexmeta::EnergyDiff</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a86f970e1522a3a180c9f9ada9df82b7e" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a961b7de161f14f4ac92b8dd216399b6a" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a55114ed454aea2b44ba530e880fae3bf" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a354440c37a048f6d85e1b8613735a0b7" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PropertyBearer::"><scope>omexmeta::EnergyDiff</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1abdaa4997f02b9ef36cda61037399eb86" prot="protected" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>physical_property_</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a9a68625316c4e2fa7ab5013cbe585ba0" prot="private" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>property_metaid_base_</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a8ae678b4a1cc528b20ff969b7d728bd6" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>PropertyBearer</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1aba09b3a7c564ff208507dc0d533639ff" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>PropertyBearer</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a130c3075575d8da0113ad6320a8f0794" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>PropertyBearer</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a660b03e0a511fad961682b9d5105bff3" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>PropertyBearer</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1ac6c56fcbb9cd396319c546cb472b7d01" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>PropertyBearer</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a059f531d872cf7c54ee264c7bef01681" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>propertyIsVersionOf</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a50f4abd4a7a5f699343fe824612b12fb" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>setAboutUriType</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1af24cd391d9b15de82f1fa435275ca533" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>setPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a52481a08e42648acb227defd28e4961e" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>setPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a54b3df74898019158a849b9f0a9112ad" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PropertyBearer::"><scope>omexmeta::EnergyDiff</scope><name>setPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1aa2de7a52a6737252ebf1d4d8820f8035" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>setType</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a34996f1c9fd2e0685c009de63e44cd31" prot="private" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>sinks_</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a46a321ff0c7f07b5bc59e2bbc7422f8c" prot="private" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>sources_</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a34bef11e0fca4435e0f1a9ba93d7ddf4" prot="public" virt="virtual"><scope>omexmeta::EnergyDiff</scope><name>toTriples</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a98d1be3285eaeaa15c3c888a87190f55" prot="protected" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>type_</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a87848412017394e006ac24259f3f9e02" prot="protected" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>uriHandler_</name></member>
      <member refid="classomexmeta_1_1EnergyDiff_1a702c8bcf724ef81aa9af04a1389507e8" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>~EnergyDiff</name></member>
      <member refid="classomexmeta_1_1PropertyBearer_1a9c492b5dde77979fedf04444c0316732" prot="public" virt="non-virtual"><scope>omexmeta::EnergyDiff</scope><name>~PropertyBearer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
