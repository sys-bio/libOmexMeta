<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classredland_1_1LibrdfNode" kind="class" language="C++" prot="public">
    <compoundname>redland::LibrdfNode</compoundname>
    <basecompoundref refid="classredland_1_1RefCountedRedlandType" prot="public" virt="non-virtual">redland::RefCountedRedlandType&lt; librdf_node, node_free_func &gt;</basecompoundref>
    <includes refid="LibrdfNode_8h" local="no">LibrdfNode.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a0f6b28fba74ab6ff25de32c725d499e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>redland::LibrdfNode::LibrdfNode</definition>
        <argsstring>()=default</argsstring>
        <name>LibrdfNode</name>
        <briefdescription>
<para>use superclass constructors and rule of 5 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="60" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1afc1bdf57705253e8204a394541b96ca7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool redland::LibrdfNode::operator==</definition>
        <argsstring>(const LibrdfNode &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="62" column="14" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="296" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1aefbf9e2bf34eb0171932e39323eadfd8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool redland::LibrdfNode::operator!=</definition>
        <argsstring>(const LibrdfNode &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="64" column="14" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="300" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a28f6ce060bddf7e1cb88d17d4d4ea81a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void redland::LibrdfNode::freeNode</definition>
        <argsstring>()</argsstring>
        <name>freeNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="66" column="14" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="281" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a200c7a67088e66d6fc73f52bdb51d2e9" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>redland::LibrdfNode::LibrdfNode</definition>
        <argsstring>(librdf_node *node)</argsstring>
        <name>LibrdfNode</name>
        <param>
          <type><ref refid="structraptor__term" kindref="compound">librdf_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="68" column="18" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="16" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a0662461585aba94581be80247d9bd917" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>redland::LibrdfNode::LibrdfNode</definition>
        <argsstring>(const LibrdfUri &amp;uri)</argsstring>
        <name>LibrdfNode</name>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfUri" kindref="compound">LibrdfUri</ref> &amp;</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="70" column="18" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a30d48200b6b5c8a837985e7c298082d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>raptor_term_type</type>
        <definition>raptor_term_type redland::LibrdfNode::getRaptorTermType</definition>
        <argsstring>() const</argsstring>
        <name>getRaptorTermType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="89" column="26" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="190" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a535fbe1bc21ca9cd9b39b969bfd2e500" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string redland::LibrdfNode::str</definition>
        <argsstring>() const</argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="91" column="21" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="166" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a98487d5af58971d820fcb99c88d8712d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classredland_1_1LibrdfUri" kindref="compound">LibrdfUri</ref></type>
        <definition>LibrdfUri redland::LibrdfNode::getLiteralDatatype</definition>
        <argsstring>()</argsstring>
        <name>getLiteralDatatype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="93" column="19" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="194" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a58b9962c783be77fd0d2cb7036bfdc6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string redland::LibrdfNode::getLiteralLanguage</definition>
        <argsstring>()</argsstring>
        <name>getLiteralLanguage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="95" column="21" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="200" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a49431de8c3262ee56d533a5fe047ee00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string redland::LibrdfNode::getBlankIdentifier</definition>
        <argsstring>()</argsstring>
        <name>getBlankIdentifier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="97" column="21" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="207" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a0dd2ff697c0753eddf7327f64390ed77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classredland_1_1LibrdfUri" kindref="compound">LibrdfUri</ref></type>
        <definition>LibrdfUri redland::LibrdfNode::getUri</definition>
        <argsstring>()</argsstring>
        <name>getUri</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="99" column="19" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a01aeb7675187379674746f803a1fbdc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void redland::LibrdfNode::setUri</definition>
        <argsstring>(const std::string &amp;uri)</argsstring>
        <name>setUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="101" column="14" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="217" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a160db9f7c7636c339e12c26f519b8fff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void redland::LibrdfNode::setLiteralDatatype</definition>
        <argsstring>(const std::string &amp;datatype)</argsstring>
        <name>setLiteralDatatype</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>datatype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="103" column="14" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="234" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1afd81499fe4125cc2f4c472d33fb6c8c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void redland::LibrdfNode::setBlankIdentifier</definition>
        <argsstring>(const std::string &amp;identifier)</argsstring>
        <name>setBlankIdentifier</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="107" column="14" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="267" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a43ba1bed3f1cc6ed654a16c570598565" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string redland::LibrdfNode::getNamespace</definition>
        <argsstring>() const</argsstring>
        <name>getNamespace</name>
        <briefdescription>
<para>get namespace portion of the node. I.e. all but last section of the uri </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="119" column="21" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="324" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1aeeac0c4a350c5974edbd5e335cf200b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool redland::LibrdfNode::isBlank</definition>
        <argsstring>()</argsstring>
        <name>isBlank</name>
        <briefdescription>
<para>indicator for whether this is a blank node </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="126" column="14" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="349" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1ad7795f903a87e8afc2d3e7dc5a1630dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool redland::LibrdfNode::isUri</definition>
        <argsstring>()</argsstring>
        <name>isUri</name>
        <briefdescription>
<para>indicator for whether this is a uri node </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="131" column="14" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="352" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a5e2c53c062c913fda451712585d1f3cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool redland::LibrdfNode::isLiteral</definition>
        <argsstring>()</argsstring>
        <name>isLiteral</name>
        <briefdescription>
<para>indicator for whether this is a literal node </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="136" column="14" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="355" bodyend="357"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1aacf853ee60f9d706bc7e95fb426166bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
        <definition>LibrdfNode redland::LibrdfNode::fromUriString</definition>
        <argsstring>(const std::string &amp;uri_string)</argsstring>
        <name>fromUriString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri_string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="72" column="27" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="27" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a22ea96262be432e6abb5c1e28ede3071" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
        <definition>LibrdfNode redland::LibrdfNode::fromBlank</definition>
        <argsstring>(const std::string &amp;blank)</argsstring>
        <name>fromBlank</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>blank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="74" column="27" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a96a685f8e79ba04c91a15e024a66388f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
        <definition>LibrdfNode redland::LibrdfNode::fromLiteral</definition>
        <argsstring>(const std::string &amp;literal, const std::string &amp;literal_datatype_uri=&quot;&quot;, const std::string &amp;xml_language=std::string())</argsstring>
        <name>fromLiteral</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>literal</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>literal_datatype_uri</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>xml_language</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>construct a literal node </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>literal</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to use for literal node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>literal_datatype_uri</parametername>
</parameternamelist>
<parameterdescription>
<para>defaults to &quot;&quot;, i.e. no defined datatype. Users can use any datatype from the RDF specification and users do not need to pass the full URI. For example, to specify a datatype was a string you only need to use &quot;string&quot; for this argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xml_language</parametername>
</parameternamelist>
<parameterdescription>
<para>The language for this literal. See RDF specification for more details. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="84" column="27" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="129" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1aaeeeca26bafdaf7f118af3307a4768be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
        <definition>LibrdfNode redland::LibrdfNode::newEmptyNode</definition>
        <argsstring>()</argsstring>
        <name>newEmptyNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="87" column="27" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a3242e29edb736ba0aa8ac42fd6b3ae58" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string redland::LibrdfNode::validateLiteralDatatype</definition>
        <argsstring>(const std::string &amp;literal_datatype_uri)</argsstring>
        <name>validateLiteralDatatype</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>literal_datatype_uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="105" column="28" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="114" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a46208d163a49bc7640a8b4c847e2a28b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
        <definition>LibrdfNode redland::LibrdfNode::copyNode</definition>
        <argsstring>(const LibrdfNode &amp;node)</argsstring>
        <name>copyNode</name>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="112" column="27" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="304" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a872032a7516dd140f93a9f4af3e0abd9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
        <definition>LibrdfNode redland::LibrdfNode::fromRelativeUri</definition>
        <argsstring>(const std::string &amp;uri_string, const std::string &amp;base_uri)</argsstring>
        <name>fromRelativeUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri_string</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>base_uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="114" column="27" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="102" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classredland_1_1LibrdfNode_1a56623e9b231d824ad34d43d9a3994df7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; redland::LibrdfNode::splitStringBy</definition>
        <argsstring>(const std::string &amp;str, char delimiter)</argsstring>
        <name>splitStringBy</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delimiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="121" column="28" bodyfile="src/redland/RedlandWrapper/src/LibrdfNode.cpp" bodystart="308" bodyend="322"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>C++ wrapper around librdf_node that uses RAII for memory management. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>redland::RedlandType&lt; ObjType, FreeFuncType &gt;</label>
        <link refid="classredland_1_1RedlandType"/>
      </node>
      <node id="1">
        <label>redland::LibrdfNode</label>
        <link refid="classredland_1_1LibrdfNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>RefCounted_librdf_node</label>
        <link refid="classredland_1_1RefCountedRedlandType"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>redland::RedlandType&lt; ObjType, FreeFuncType &gt;</label>
        <link refid="classredland_1_1RedlandType"/>
      </node>
      <node id="1">
        <label>redland::LibrdfNode</label>
        <link refid="classredland_1_1LibrdfNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>RefCounted_librdf_node</label>
        <link refid="classredland_1_1RefCountedRedlandType"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" line="54" column="5" bodyfile="src/redland/RedlandWrapper/src/include/redland/LibrdfNode.h" bodystart="54" bodyend="137"/>
    <listofallmembers>
      <member refid="classredland_1_1RedlandType_1a86304e5a3e82aae8ea4aae868b4fa7e4" prot="public" virt="virtual"><scope>redland::LibrdfNode</scope><name>checkForNull</name></member>
      <member refid="classredland_1_1LibrdfNode_1a46208d163a49bc7640a8b4c847e2a28b" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>copyNode</name></member>
      <member refid="classredland_1_1RedlandType_1afd3a894521540cf05dfa56a3a59b25b9" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>freeFunc_</name></member>
      <member refid="classredland_1_1LibrdfNode_1a28f6ce060bddf7e1cb88d17d4d4ea81a" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>freeNode</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a5e09c936eada4386171e23bc599f334f" prot="public" virt="virtual"><scope>redland::LibrdfNode</scope><name>freeObj</name></member>
      <member refid="classredland_1_1LibrdfNode_1a22ea96262be432e6abb5c1e28ede3071" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>fromBlank</name></member>
      <member refid="classredland_1_1LibrdfNode_1a96a685f8e79ba04c91a15e024a66388f" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>fromLiteral</name></member>
      <member refid="classredland_1_1LibrdfNode_1a872032a7516dd140f93a9f4af3e0abd9" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>fromRelativeUri</name></member>
      <member refid="classredland_1_1LibrdfNode_1aacf853ee60f9d706bc7e95fb426166bd" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>fromUriString</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1aad3189482972131c1d253e7759fee33e" prot="public" virt="virtual"><scope>redland::LibrdfNode</scope><name>get</name></member>
      <member refid="classredland_1_1LibrdfNode_1a49431de8c3262ee56d533a5fe047ee00" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>getBlankIdentifier</name></member>
      <member refid="classredland_1_1LibrdfNode_1a98487d5af58971d820fcb99c88d8712d" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>getLiteralDatatype</name></member>
      <member refid="classredland_1_1LibrdfNode_1a58b9962c783be77fd0d2cb7036bfdc6a" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>getLiteralLanguage</name></member>
      <member refid="classredland_1_1LibrdfNode_1a43ba1bed3f1cc6ed654a16c570598565" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>getNamespace</name></member>
      <member refid="classredland_1_1LibrdfNode_1a30d48200b6b5c8a837985e7c298082d8" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>getRaptorTermType</name></member>
      <member refid="classredland_1_1LibrdfNode_1a0dd2ff697c0753eddf7327f64390ed77" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>getUri</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a6984bffbdd92f2eaaf23e86f65044fb9" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>getUsage</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a688d681a2a77dcbd3223757912cc93b6" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>getWithoutIncrement</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1ae8d1c23cc4bb8a9df585c87765d857bb" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>incrementUsage</name></member>
      <member refid="classredland_1_1LibrdfNode_1aeeac0c4a350c5974edbd5e335cf200b8" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>isBlank</name></member>
      <member refid="classredland_1_1LibrdfNode_1a5e2c53c062c913fda451712585d1f3cd" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>isLiteral</name></member>
      <member refid="classredland_1_1RedlandType_1ac6594279280345bd8a03c1a7e950d3e0" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>isNull</name></member>
      <member refid="classredland_1_1LibrdfNode_1ad7795f903a87e8afc2d3e7dc5a1630dd" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>isUri</name></member>
      <member refid="classredland_1_1LibrdfNode_1a0f6b28fba74ab6ff25de32c725d499e9" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>LibrdfNode</name></member>
      <member refid="classredland_1_1LibrdfNode_1a200c7a67088e66d6fc73f52bdb51d2e9" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>LibrdfNode</name></member>
      <member refid="classredland_1_1LibrdfNode_1a0662461585aba94581be80247d9bd917" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>LibrdfNode</name></member>
      <member refid="classredland_1_1LibrdfNode_1aaeeeca26bafdaf7f118af3307a4768be" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>newEmptyNode</name></member>
      <member refid="classredland_1_1RedlandType_1ac9d0c3d245e2394c137ee0ab266784ed" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>obj_</name></member>
      <member refid="classredland_1_1LibrdfNode_1aefbf9e2bf34eb0171932e39323eadfd8" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>operator!=</name></member>
      <member refid="classredland_1_1RedlandType_1a4b0707a7465ffb5952bae3651f8c6d41" prot="public" virt="non-virtual" ambiguityscope="redland::RefCountedRedlandType::"><scope>redland::LibrdfNode</scope><name>operator!=</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1aa0d305fe2357f0f5370a5027e165506a" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>operator=</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a1ac9b3d35fbbc1f17fb474d61071690e" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>operator=</name></member>
      <member refid="classredland_1_1RedlandType_1a5dd5fd7edeb2b6c17e8c92eb7ba01cac" prot="public" virt="non-virtual" ambiguityscope="redland::RedlandType::"><scope>redland::LibrdfNode</scope><name>operator=</name></member>
      <member refid="classredland_1_1RedlandType_1a22e381182a5642883ad578db40368f13" prot="public" virt="non-virtual" ambiguityscope="redland::RedlandType::"><scope>redland::LibrdfNode</scope><name>operator=</name></member>
      <member refid="classredland_1_1LibrdfNode_1afc1bdf57705253e8204a394541b96ca7" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>operator==</name></member>
      <member refid="classredland_1_1RedlandType_1a9fc5b1ce564f4c2497855cd965df1cfd" prot="public" virt="non-virtual" ambiguityscope="redland::RefCountedRedlandType::"><scope>redland::LibrdfNode</scope><name>operator==</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a3c3a57c6b73d9bea7e0a9cdb9a725006" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1ab7e0f16ed9acd6ba9c65b8e9259301e9" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a89f2c7b5d8133d7b22c54263ea2dcb3b" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a7884dd6bc66d9880090bb53f14683f1f" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RedlandType_1ab7e0f16ed9acd6ba9c65b8e9259301e9" prot="public" virt="non-virtual" ambiguityscope="redland::RedlandType::"><scope>redland::LibrdfNode</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RedlandType_1a89f2c7b5d8133d7b22c54263ea2dcb3b" prot="public" virt="non-virtual" ambiguityscope="redland::RedlandType::"><scope>redland::LibrdfNode</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RedlandType_1a7884dd6bc66d9880090bb53f14683f1f" prot="public" virt="non-virtual" ambiguityscope="redland::RedlandType::"><scope>redland::LibrdfNode</scope><name>RedlandType</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1ae0ca62ccfcffebe1f8d391fc80719fd7" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>RefCountedRedlandType</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1abb14a238dec2d35068c96d873ccef2da" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>RefCountedRedlandType</name></member>
      <member refid="classredland_1_1RedlandType_1aee7e39b6197cf77b19f873e3c2cea495" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>release</name></member>
      <member refid="classredland_1_1LibrdfNode_1afd81499fe4125cc2f4c472d33fb6c8c0" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>setBlankIdentifier</name></member>
      <member refid="classredland_1_1RedlandType_1ac3255173f68c11e2ebeb0d991fec24e7" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>setFreeFunc</name></member>
      <member refid="classredland_1_1LibrdfNode_1a160db9f7c7636c339e12c26f519b8fff" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>setLiteralDatatype</name></member>
      <member refid="classredland_1_1RedlandType_1a403c5018a01ee1dc94e4caa33bef91e7" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>setObj</name></member>
      <member refid="classredland_1_1LibrdfNode_1a01aeb7675187379674746f803a1fbdc9" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>setUri</name></member>
      <member refid="classredland_1_1LibrdfNode_1a56623e9b231d824ad34d43d9a3994df7" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>splitStringBy</name></member>
      <member refid="classredland_1_1LibrdfNode_1a535fbe1bc21ca9cd9b39b969bfd2e500" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>str</name></member>
      <member refid="classredland_1_1RefCountedRedlandType_1a8ce7a7bf352c4d91ae785a4468cf0960" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>ThisType</name></member>
      <member refid="classredland_1_1LibrdfNode_1a3242e29edb736ba0aa8ac42fd6b3ae58" prot="public" virt="non-virtual"><scope>redland::LibrdfNode</scope><name>validateLiteralDatatype</name></member>
      <member refid="classredland_1_1RedlandType_1a028dab285bfd81fa4efca9206b0cd498" prot="public" virt="virtual"><scope>redland::LibrdfNode</scope><name>~RedlandType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
