<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classomexmeta_1_1Logger" kind="class" language="C++" prot="public">
    <compoundname>omexmeta::Logger</compoundname>
    <includes refid="Logger_8h" local="no">Logger.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classomexmeta_1_1Logger_1ad32818f7b4fd7aac41cdbe390a93560c" prot="public" static="no">
        <type>std::shared_ptr&lt; spdlog::logger &gt;</type>
        <definition>using omexmeta::Logger::LoggerPtr =  std::shared_ptr&lt;spdlog::logger&gt;</definition>
        <argsstring></argsstring>
        <name>LoggerPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="31" column="9" bodyfile="src/omexmeta/include/omexmeta/Logger.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classomexmeta_1_1Logger_1a2b2be48282c5fed6f2527e03518290a5" prot="public" static="no">
        <type>spdlog::level::level_enum</type>
        <definition>using omexmeta::Logger::LogLevel =  spdlog::level::level_enum</definition>
        <argsstring></argsstring>
        <name>LogLevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="32" column="9" bodyfile="src/omexmeta/include/omexmeta/Logger.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1Logger_1a93dcc13c2fc6049c66d7f5ce8246cd5e" prot="public" static="no" mutable="no">
        <type>LoggerPtr</type>
        <definition>LoggerPtr omexmeta::Logger::logger</definition>
        <argsstring></argsstring>
        <name>logger</name>
        <briefdescription>
<para>reference to the currently active logger </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="126" column="19" bodyfile="src/omexmeta/include/omexmeta/Logger.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Logger_1a96e095f68f0b4f9bb98f12290a3d96fb" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool omexmeta::Logger::isFileLogger</definition>
        <argsstring></argsstring>
        <name>isFileLogger</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>indicator, true when the file logger is active </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="131" column="14" bodyfile="src/omexmeta/include/omexmeta/Logger.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Logger_1affa234a781b835b051e9495679bcede9" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool omexmeta::Logger::isConsoleLogger</definition>
        <argsstring></argsstring>
        <name>isConsoleLogger</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>indicator, true when the console logger is active </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="136" column="14" bodyfile="src/omexmeta/include/omexmeta/Logger.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1Logger_1a833d9e8b8d32ddf5fbdbbb355a30edd2" prot="private" static="yes" mutable="no">
        <type><ref refid="classomexmeta_1_1Logger" kindref="compound">Logger</ref> *</type>
        <definition>Logger * omexmeta::Logger::inst_</definition>
        <argsstring></argsstring>
        <name>inst_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The one single instance of <ref refid="classomexmeta_1_1Logger" kindref="compound">Logger</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="148" column="23" bodyfile="src/omexmeta/include/omexmeta/Logger.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1Logger_1a3ff1260369f909d0d9d7570b2ffce2ff" prot="private" static="no" mutable="no">
        <type>std::filesystem::path</type>
        <definition>std::filesystem::path omexmeta::Logger::filepath_</definition>
        <argsstring></argsstring>
        <name>filepath_</name>
        <briefdescription>
<para>the filepath to be used for when fileLogger is active </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="154" column="31" bodyfile="src/omexmeta/include/omexmeta/Logger.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Logger_1aae2c76a908b59a1564907852c0a76aaa" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int omexmeta::Logger::backtraceNum</definition>
        <argsstring></argsstring>
        <name>backtraceNum</name>
        <initializer>= 32</initializer>
        <briefdescription>
<para>store how many message to store during backtrace feature </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="159" column="13" bodyfile="src/omexmeta/include/omexmeta/Logger.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Logger_1af6ed361d9490ea96ed5acd332094f0ac" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::Logger::formatterPattern</definition>
        <argsstring></argsstring>
        <name>formatterPattern</name>
        <initializer>= &quot;[%H:%M:%S %z] %^ %l %g:%# %v %$&quot;</initializer>
        <briefdescription>
<para>store the current formatter pattern </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="164" column="21" bodyfile="src/omexmeta/include/omexmeta/Logger.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Logger_1a2aafb972d112f6cb7b65ec03cda89886" prot="private" static="no" mutable="no">
        <type>LogLevel</type>
        <definition>LogLevel omexmeta::Logger::level_</definition>
        <argsstring></argsstring>
        <name>level_</name>
        <initializer>= LogLevel::warn</initializer>
        <briefdescription>
<para>default logging level </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="169" column="18" bodyfile="src/omexmeta/include/omexmeta/Logger.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Logger_1aa59535ea90f305c7ff2b2561609ea29d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool omexmeta::Logger::shouldBacktrace_</definition>
        <argsstring></argsstring>
        <name>shouldBacktrace_</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>indicator variable for backtracing </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="174" column="14" bodyfile="src/omexmeta/include/omexmeta/Logger.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classomexmeta_1_1Logger_1aba2c1a3abce94299011441a4a22a252b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Logger" kindref="compound">Logger</ref> *</type>
        <definition>Logger * omexmeta::Logger::getLogger</definition>
        <argsstring>()</argsstring>
        <name>getLogger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="34" column="23" bodyfile="src/omexmeta/Logger.cpp" bodystart="22" bodyend="27"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classomexmeta_1_1Logger_1a134dd390a0ffd511e7272a3ff604ea5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Logger::setFormatter</definition>
        <argsstring>(const std::string &amp;format)</argsstring>
        <name>setFormatter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>formatter strings use the {fmt} library. See documentation here: <ulink url="https://fmt.dev/latest/index.html">https://fmt.dev/latest/index.html</ulink> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="40" column="14" bodyfile="src/omexmeta/Logger.cpp" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Logger_1a8aea25829e62c8f4c6f03fc48d50dd41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Logger::setLevel</definition>
        <argsstring>(LogLevel level)</argsstring>
        <name>setLevel</name>
        <param>
          <type>LogLevel</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>set the current logging level </para>
        </briefdescription>
        <detaileddescription>
<para>possible values of level:<itemizedlist>
<listitem><para>spdlog::level::critical;</para>
</listitem><listitem><para>spdlog::level::err;</para>
</listitem><listitem><para>spdlog::level::warn;</para>
</listitem><listitem><para>spdlog::level::debug;</para>
</listitem><listitem><para>spdlog::level::info;</para>
</listitem><listitem><para>spdlog::level::trace;</para>
</listitem><listitem><para>spdlog::level::off; </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="53" column="14" bodyfile="src/omexmeta/Logger.cpp" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Logger_1a597998f70839cc4e940bdc3d88b67409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LogLevel</type>
        <definition>Logger::LogLevel omexmeta::Logger::getLevel</definition>
        <argsstring>()</argsstring>
        <name>getLevel</name>
        <briefdescription>
<para>returns the current logging level </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="58" column="18" bodyfile="src/omexmeta/Logger.cpp" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Logger_1adff73e1d612beabc4816cde05387454c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Logger::enableBacktrace</definition>
        <argsstring>(int num)</argsstring>
        <name>enableBacktrace</name>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>enable the backtrace logging feature - display the last </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>messages when spdlog::dump_backtrace is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="64" column="14" bodyfile="src/omexmeta/Logger.cpp" bodystart="106" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Logger_1ab9f86a85a769a36a22f6e02dad5c78fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Logger::disableBacktrace</definition>
        <argsstring>()</argsstring>
        <name>disableBacktrace</name>
        <briefdescription>
<para>disable the backtrace feature </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="69" column="14" bodyfile="src/omexmeta/Logger.cpp" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Logger_1a10e34a8915c7520e9332d9c1889f7521" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Logger::consoleLogger</definition>
        <argsstring>()</argsstring>
        <name>consoleLogger</name>
        <briefdescription>
<para>create and switch to a console logger </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="74" column="14" bodyfile="src/omexmeta/Logger.cpp" bodystart="29" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Logger_1af999f93aa9e820a40c87ed34797fc1ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Logger::fileLogger</definition>
        <argsstring>(const std::filesystem::path &amp;filename)</argsstring>
        <name>fileLogger</name>
        <param>
          <type>const std::filesystem::path &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>create and switch to a file logger </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="79" column="14" bodyfile="src/omexmeta/Logger.cpp" bodystart="56" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Logger_1a56f5508d87ac4f700b4a7641cb7b88a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Logger::dumpBacktrace</definition>
        <argsstring>()</argsstring>
        <name>dumpBacktrace</name>
        <briefdescription>
<para>dump backtrace messages when called </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="84" column="14" bodyfile="src/omexmeta/Logger.cpp" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Logger_1ab49ff109d59a626fbcec1c05389fe6a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Logger::info</definition>
        <argsstring>(const std::string &amp;message)</argsstring>
        <name>info</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>log a info message to the currently active logger </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="90" column="14" bodyfile="src/omexmeta/Logger.cpp" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Logger_1a052bdd430682c2c91490bc2763b918fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Logger::trace</definition>
        <argsstring>(const std::string &amp;message)</argsstring>
        <name>trace</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>log a trace message to the currently active logger </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="96" column="14" bodyfile="src/omexmeta/Logger.cpp" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Logger_1a8e5db234df44e3fc3a60bfcbf3e77f4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Logger::debug</definition>
        <argsstring>(const std::string &amp;message)</argsstring>
        <name>debug</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>log a debug message to the currently active logger </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="102" column="14" bodyfile="src/omexmeta/Logger.cpp" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Logger_1aa35b6607acc0873cd955f518b67c81dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Logger::warn</definition>
        <argsstring>(const std::string &amp;message)</argsstring>
        <name>warn</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>log a warning message to the currently active logger </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="108" column="14" bodyfile="src/omexmeta/Logger.cpp" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Logger_1aea5f0b2cf462c59f3a682a4447dcabb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Logger::error</definition>
        <argsstring>(const std::string &amp;message)</argsstring>
        <name>error</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>log a error message to the currently active logger </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="114" column="14" bodyfile="src/omexmeta/Logger.cpp" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Logger_1ae7ff56f93077d9f17626f9c8141650e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Logger::critical</definition>
        <argsstring>(const std::string &amp;message)</argsstring>
        <name>critical</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>log a critical message to the currently active logger </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="120" column="14" bodyfile="src/omexmeta/Logger.cpp" bodystart="139" bodyend="141"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classomexmeta_1_1Logger_1a47644826c7413d390d471f23033edfc0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Logger::Logger</definition>
        <argsstring>()</argsstring>
        <name>Logger</name>
        <briefdescription>
<para>constructor is private </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Logger.h" line="143" column="9" bodyfile="src/omexmeta/Logger.cpp" bodystart="12" bodyend="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Logging class for libOmexMeta. Implemented as a singleton. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/omexmeta/include/omexmeta/Logger.h" line="29" column="5" bodyfile="src/omexmeta/include/omexmeta/Logger.h" bodystart="29" bodyend="177"/>
    <listofallmembers>
      <member refid="classomexmeta_1_1Logger_1aae2c76a908b59a1564907852c0a76aaa" prot="private" virt="non-virtual"><scope>omexmeta::Logger</scope><name>backtraceNum</name></member>
      <member refid="classomexmeta_1_1Logger_1a10e34a8915c7520e9332d9c1889f7521" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>consoleLogger</name></member>
      <member refid="classomexmeta_1_1Logger_1ae7ff56f93077d9f17626f9c8141650e8" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>critical</name></member>
      <member refid="classomexmeta_1_1Logger_1a8e5db234df44e3fc3a60bfcbf3e77f4b" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>debug</name></member>
      <member refid="classomexmeta_1_1Logger_1ab9f86a85a769a36a22f6e02dad5c78fa" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>disableBacktrace</name></member>
      <member refid="classomexmeta_1_1Logger_1a56f5508d87ac4f700b4a7641cb7b88a0" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>dumpBacktrace</name></member>
      <member refid="classomexmeta_1_1Logger_1adff73e1d612beabc4816cde05387454c" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>enableBacktrace</name></member>
      <member refid="classomexmeta_1_1Logger_1aea5f0b2cf462c59f3a682a4447dcabb8" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>error</name></member>
      <member refid="classomexmeta_1_1Logger_1af999f93aa9e820a40c87ed34797fc1ce" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>fileLogger</name></member>
      <member refid="classomexmeta_1_1Logger_1a3ff1260369f909d0d9d7570b2ffce2ff" prot="private" virt="non-virtual"><scope>omexmeta::Logger</scope><name>filepath_</name></member>
      <member refid="classomexmeta_1_1Logger_1af6ed361d9490ea96ed5acd332094f0ac" prot="private" virt="non-virtual"><scope>omexmeta::Logger</scope><name>formatterPattern</name></member>
      <member refid="classomexmeta_1_1Logger_1a597998f70839cc4e940bdc3d88b67409" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>getLevel</name></member>
      <member refid="classomexmeta_1_1Logger_1aba2c1a3abce94299011441a4a22a252b" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>getLogger</name></member>
      <member refid="classomexmeta_1_1Logger_1ab49ff109d59a626fbcec1c05389fe6a2" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>info</name></member>
      <member refid="classomexmeta_1_1Logger_1a833d9e8b8d32ddf5fbdbbb355a30edd2" prot="private" virt="non-virtual"><scope>omexmeta::Logger</scope><name>inst_</name></member>
      <member refid="classomexmeta_1_1Logger_1affa234a781b835b051e9495679bcede9" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>isConsoleLogger</name></member>
      <member refid="classomexmeta_1_1Logger_1a96e095f68f0b4f9bb98f12290a3d96fb" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>isFileLogger</name></member>
      <member refid="classomexmeta_1_1Logger_1a2aafb972d112f6cb7b65ec03cda89886" prot="private" virt="non-virtual"><scope>omexmeta::Logger</scope><name>level_</name></member>
      <member refid="classomexmeta_1_1Logger_1a93dcc13c2fc6049c66d7f5ce8246cd5e" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>logger</name></member>
      <member refid="classomexmeta_1_1Logger_1a47644826c7413d390d471f23033edfc0" prot="private" virt="non-virtual"><scope>omexmeta::Logger</scope><name>Logger</name></member>
      <member refid="classomexmeta_1_1Logger_1ad32818f7b4fd7aac41cdbe390a93560c" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>LoggerPtr</name></member>
      <member refid="classomexmeta_1_1Logger_1a2b2be48282c5fed6f2527e03518290a5" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>LogLevel</name></member>
      <member refid="classomexmeta_1_1Logger_1a134dd390a0ffd511e7272a3ff604ea5e" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>setFormatter</name></member>
      <member refid="classomexmeta_1_1Logger_1a8aea25829e62c8f4c6f03fc48d50dd41" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>setLevel</name></member>
      <member refid="classomexmeta_1_1Logger_1aa59535ea90f305c7ff2b2561609ea29d" prot="private" virt="non-virtual"><scope>omexmeta::Logger</scope><name>shouldBacktrace_</name></member>
      <member refid="classomexmeta_1_1Logger_1a052bdd430682c2c91490bc2763b918fc" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>trace</name></member>
      <member refid="classomexmeta_1_1Logger_1aa35b6607acc0873cd955f518b67c81dd" prot="public" virt="non-virtual"><scope>omexmeta::Logger</scope><name>warn</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
